# Generated by carnix 0.6.6: carnix ./../ircbot/Cargo.lock --output ./ircbot-carnix.nix
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src:
      # The comments assume the `include` field of the Cargo.toml like:
      # include = [ "foo", "bar" ]
      # and the package is being built from /mypackage
      #
      # includeFiles == [ "foo" "bar" ]
      let
        # and includedFileAbsolutePaths == [ "/mypackage/foo" "/mypackage/bar" ]
        includedFileAbsolutePaths = builtins.map (relativePath: toString (src + ("/" + relativePath))) includedFiles;

        # Return true only when a possible path exactly matches an
        # absolute path, ie:
        #
        #     checkExactMatch "/mypackage/foo" == true
        #     checkExactMatch "/mypackage/foo/bar" == false
        #     checkExactMatch "/mypackage/baz" == false
        checkExactMatch = possiblePath: builtins.elem possiblePath includedFileAbsolutePaths;

        # Return true only when a possible path is a suffix to a
        # directory described by the include.
        #
        #     checkPrefixMatch "/mypackage/buzfoo" == false
        #     checkPrefixMatch "/mypackage/foo" == false
        #     checkPrefixMatch "/mypackage/foo/bar" == true
        #     checkPrefixMatch "/mypackage/baz/foo" == false
        checkPrefixMatch = possiblePath: lib.lists.any
          (acceptablePrefix: lib.strings.hasPrefix "${acceptablePrefix}/" possiblePath)
          includedFileAbsolutePaths;

      in builtins.filterSource (possiblePath: _type:
          ((checkExactMatch possiblePath) || (checkPrefixMatch possiblePath))
      )
    src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  ircbot = f: ircbot_0_1_0 { features = ircbot_0_1_0_features { ircbot_0_1_0 = f; }; };
  advapi32_sys_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "advapi32-sys";
    version = "0.2.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1l6789hkz2whd9gklwz1m379kcvyizaj8nnzj3rn4a5h79yg59v7";
    libName = "advapi32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  aho_corasick_0_5_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "aho-corasick";
    version = "0.5.3";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1igab46mvgknga3sxkqc917yfff0wsjxjzabdigmh240p5qxqlnn";
    libName = "aho_corasick";
    crateBin = [ {  name = "aho-corasick-dot"; } ];
    inherit dependencies buildDependencies features;
  };
  aho_corasick_0_6_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "aho-corasick";
    version = "0.6.4";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "189v919mp6rzzgjp1khpn4zlq8ls81gh43x1lmc8kbkagdlpq888";
    libName = "aho_corasick";
    crateBin = [ {  name = "aho-corasick-dot"; } ];
    inherit dependencies buildDependencies features;
  };
  amq_proto_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "amq-proto";
    version = "0.1.0";
    authors = [ "Andrii Dmytrenko <refresh.xss@gmail.com>" ];
    sha256 = "0333fsph61q9nxbx6h8hdxjmpabjm9vmsfc6q5agy801x35r4ml9";
    inherit dependencies buildDependencies features;
  };
  amqp_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "amqp";
    version = "0.1.0";
    authors = [ "Andrii Dmytrenko <andrey@reevoo.com>" ];
    src = fetchgit {
       url = "https://github.com/grahamc/rust-amqp.git";
       rev = "07ff696c26f5fc7725a5183fa6d2180489f59ae1";
       sha256 = "0rzl0g3a0b57cqyw8h83mqczmb240h8kd74sbadpgfd5d182r76k";
    };
    inherit dependencies buildDependencies features;
  };
  backtrace_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "backtrace";
    version = "0.3.4";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "The Rust Project Developers" ];
    sha256 = "1caba8w3rqd5ghr88ghyz5wgkf81dgx18bj1llkax6qmianc6gk7";
    inherit dependencies buildDependencies features;
  };
  backtrace_sys_0_1_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "backtrace-sys";
    version = "0.1.16";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1cn2c8q3dn06crmnk0p62czkngam4l8nf57wy33nz1y5g25pszwy";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  bit_vec_0_4_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bit-vec";
    version = "0.4.4";
    authors = [ "Alexis Beingessner <a.beingessner@gmail.com>" ];
    sha256 = "06czykmn001z6c3a4nsrpc3lrj63ga0kzp7kgva9r9wylhkkqpq9";
    inherit dependencies buildDependencies features;
  };
  bitflags_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "0.7.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1hr72xg5slm0z4pxs2hiy4wcyx3jva70h58b7mid8l0a4c8f7gn5";
    inherit dependencies buildDependencies features;
  };
  bitflags_0_9_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "0.9.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "18h073l5jd88rx4qdr95fjddr9rk79pb1aqnshzdnw16cfmb9rws";
    inherit dependencies buildDependencies features;
  };
  bufstream_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bufstream";
    version = "0.1.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "011ihrdvj4mm3yd2jgq1z554clnimvfv6wnbgdwjccfvn1qn3d4s";
    inherit dependencies buildDependencies features;
  };
  byteorder_0_5_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "byteorder";
    version = "0.5.3";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0zsr6b0m0yl5c0yy92nq7srfpczd1dx1xqcx3rlm5fbl8si9clqx";
    inherit dependencies buildDependencies features;
  };
  byteorder_1_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "byteorder";
    version = "1.2.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1wsxnqcscg4gchdmgdbwc78lw2qx2i6bnjd564xq7h7qc4fp2157";
    inherit dependencies buildDependencies features;
  };
  bytes_0_4_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bytes";
    version = "0.4.5";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "09grypiv7wnqbhsmini1i77d5bwcna6nzp3yhh9i02hn37ma58vn";
    inherit dependencies buildDependencies features;
  };
  cc_1_0_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cc";
    version = "1.0.3";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "193pwqgh79w6k0k29svyds5nnlrwx44myqyrw605d5jj4yk2zmpr";
    inherit dependencies buildDependencies features;
  };
  cfg_if_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0x06hvrrqy96m97593823vvxcgvjaxckghwyy2jcyc8qc7c6cyhi";
    inherit dependencies buildDependencies features;
  };
  chrono_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "chrono";
    version = "0.4.0";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "0hm53hi6v7b6b1va6vn96lx26wvj8gzi2g51s1j02nlz0jcprw6a";
    inherit dependencies buildDependencies features;
  };
  core_foundation_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation";
    version = "0.2.3";
    authors = [ "The Servo Project Developers" ];
    sha256 = "1g0vpya5h2wa0nlz4a74jar6y8z09f0p76zbzfqrm3dbfsrld1pm";
    inherit dependencies buildDependencies features;
  };
  core_foundation_sys_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation-sys";
    version = "0.2.3";
    authors = [ "The Servo Project Developers" ];
    sha256 = "19s0d03294m9s5j8cvy345db3gkhs2y02j5268ap0c6ky5apl53s";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  crypt32_sys_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crypt32-sys";
    version = "0.2.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1vy1q3ayc7f4wiwyxw31hd12cvs7791x3by6ka9wbxhm5gzfs3d0";
    libName = "crypt32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  dbghelp_sys_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "dbghelp-sys";
    version = "0.2.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0ylpi3bbiy233m57hnisn1df1v0lbl7nsxn34b0anzsgg440hqpq";
    libName = "dbghelp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  dtoa_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "dtoa";
    version = "0.4.2";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1bxsh6fags7nr36vlz07ik2a1rzyipc8x1y30kjk832hf2pzadmw";
    inherit dependencies buildDependencies features;
  };
  encoding_0_2_33_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "encoding";
    version = "0.2.33";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "16ls6avhv5ll28zajl5q1jbiz1g80c4ygnw13zzqmij14wsp5329";
    inherit dependencies buildDependencies features;
  };
  encoding_index_japanese_1_20141219_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "encoding-index-japanese";
    version = "1.20141219.5";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "1pmfaabps0x6v6cd4fbk9ssykhkmc799dma2y78fhk7gvyr5gyl4";
    libPath = "lib.rs";
    libName = "encoding_index_japanese";
    inherit dependencies buildDependencies features;
  };
  encoding_index_korean_1_20141219_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "encoding-index-korean";
    version = "1.20141219.5";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "1b756n7gcilkx07y7zjrikcg0b8v8yd6mw8w01ji8sp3k1cabcf2";
    libPath = "lib.rs";
    libName = "encoding_index_korean";
    inherit dependencies buildDependencies features;
  };
  encoding_index_simpchinese_1_20141219_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "encoding-index-simpchinese";
    version = "1.20141219.5";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "0rb4xd8cqymhqffqqxdk18mf9n354vs50ar66jrysb1z6ymcvvpy";
    libPath = "lib.rs";
    libName = "encoding_index_simpchinese";
    inherit dependencies buildDependencies features;
  };
  encoding_index_singlebyte_1_20141219_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "encoding-index-singlebyte";
    version = "1.20141219.5";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "07df3jrfwfmzi2s352lvcpvy5dqpy2s45d2xx2dz1x7zh3q5284d";
    libPath = "lib.rs";
    libName = "encoding_index_singlebyte";
    inherit dependencies buildDependencies features;
  };
  encoding_index_tradchinese_1_20141219_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "encoding-index-tradchinese";
    version = "1.20141219.5";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "0lb12nbv29cy41gx26yz3v4kfi8h1xbn1ppja8szgqi2zm1wlywn";
    libPath = "lib.rs";
    libName = "encoding_index_tradchinese";
    inherit dependencies buildDependencies features;
  };
  encoding_index_tests_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "encoding_index_tests";
    version = "0.1.4";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" ];
    sha256 = "0z09kwh4z76q00cfr081rgjbnai4s2maq2vk88lgrq9d6bkf93f6";
    libPath = "index_tests.rs";
    inherit dependencies buildDependencies features;
  };
  enum_primitive_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "enum_primitive";
    version = "0.1.1";
    authors = [ "Anders Kaseorg <andersk@mit.edu>" ];
    sha256 = "1a225rlsz7sz3nn14dar71kp2f9v08s3rwl6j55xp51mv01f695y";
    inherit dependencies buildDependencies features;
  };
  env_logger_0_3_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "env_logger";
    version = "0.3.5";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1mvxiaaqsyjliv1mm1qaagjqiccw11mdyi3n9h9rf8y6wj15zycw";
    inherit dependencies buildDependencies features;
  };
  env_logger_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "env_logger";
    version = "0.4.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0nrx04p4xa86d5kc7aq4fwvipbqji9cmgy449h47nc9f1chafhgg";
    inherit dependencies buildDependencies features;
  };
  error_chain_0_10_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "error-chain";
    version = "0.10.0";
    authors = [ "Brian Anderson <banderson@mozilla.com>" "Paul Colomiets <paul@colomiets.name>" "Colin Kiegel <kiegel@gmx.de>" "Yamakaky <yamakaky@yamaworld.fr>" ];
    sha256 = "1xxbzd8cjlpzsb9fsih7mdnndhzrvykj0w77yg90qc85az1xwy5z";
    inherit dependencies buildDependencies features;
  };
  foreign_types_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types";
    version = "0.3.2";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "105n8sp2djb1s5lzrw04p7ss3dchr5qa3canmynx396nh3vwm2p8";
    inherit dependencies buildDependencies features;
  };
  foreign_types_shared_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types-shared";
    version = "0.1.1";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0b6cnvqbflws8dxywk4589vgbz80049lz4x1g9dfy4s1ppd3g4z5";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.2.1";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0yd4rd7ql1vdr349p6vgq2dnwmpylky1kjp8g1zgvp250jxrhddb";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_sys_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.2.0";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "1yrqsrjwlhl3di6prxf5xmyd82gyjaysldbka5wwk83z11mpqh4w";
    inherit dependencies buildDependencies features;
  };
  futures_0_1_17_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "futures";
    version = "0.1.17";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1awrl30p1yqc0l9hbhng0f2873h2wr2244caj20b706plwqmcw0y";
    inherit dependencies buildDependencies features;
  };
  idna_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "idna";
    version = "0.1.4";
    authors = [ "The rust-url developers" ];
    sha256 = "15j44qgjx1skwg9i7f4cm36ni4n99b1ayx23yxx7axxcw8vjf336";
    inherit dependencies buildDependencies features;
  };
  iovec_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "iovec";
    version = "0.1.1";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "14fns3g3arbql6lkczf2gbbzaqh22mfv7y1wq5rr2y8jhh5m8jmm";
    inherit dependencies buildDependencies features;
  };
  irc_0_12_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "irc";
    version = "0.12.5";
    authors = [ "Aaron Weiss <awe@pdgn.co>" ];
    sha256 = "05xn4p7d8r7575kb0n07hbrvjgdd5d2myz027nadkpipdriiv7v2";
    inherit dependencies buildDependencies features;
  };
  ircbot_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ircbot";
    version = "0.1.0";
    authors = [ "Graham Christensen <graham@grahamc.com>" ];
    src = include [ "Cargo.lock" "Cargot.toml" "lib.rs" "src" ] ./../ircbot;
    inherit dependencies buildDependencies features;
  };
  itoa_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "itoa";
    version = "0.3.4";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1nfkzz6vrgj0d9l3yzjkkkqzdgs68y294fjdbl7jq118qi8xc9d9";
    inherit dependencies buildDependencies features;
  };
  kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "kernel32-sys";
    version = "0.2.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
    libName = "kernel32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lazy_static_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazy_static";
    version = "0.2.11";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "1x6871cvpy5b96yv4c7jvpq316fp5d4609s9py7qk6cd6x9k34vm";
    inherit dependencies buildDependencies features;
  };
  lazy_static_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazy_static";
    version = "1.0.0";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "0wfvqyr2nvx2mbsrscg5y7gfa9skhb8p72ayanl8vl49pw24v4fh";
    inherit dependencies buildDependencies features;
  };
  lazycell_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazycell";
    version = "0.5.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Nikita Pekin <contact@nikitapek.in>" ];
    sha256 = "1ds71sc24vnhfy0ys1v46qn7fkcavi4brsk4jg3dp8d0yli3sd31";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_34_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.34";
    authors = [ "The Rust Project Developers" ];
    sha256 = "11jmqdxmv0ka10ay0l8nzx0nl7s2lc3dbrnh1mgbr2grzwdyxi2s";
    inherit dependencies buildDependencies features;
  };
  log_0_3_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.3.8";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1c43z4z85sxrsgir4s1hi84558ab5ic7jrn5qgmsiqcv90vvn006";
    inherit dependencies buildDependencies features;
  };
  matches_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "matches";
    version = "0.1.6";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "1zlrqlbvzxdil8z8ial2ihvxjwvlvg3g8dr0lcdpsjclkclasjan";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  memchr_0_1_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memchr";
    version = "0.1.11";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
    sha256 = "0x73jghamvxxq5fsw9wb0shk5m6qp3q6fsf0nibn0i6bbqkw91s8";
    inherit dependencies buildDependencies features;
  };
  memchr_2_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memchr";
    version = "2.0.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
    sha256 = "0ls2y47rjwapjdax6bp974gdp06ggm1v8d1h69wyydmh1nhgm5gr";
    inherit dependencies buildDependencies features;
  };
  mio_0_6_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mio";
    version = "0.6.11";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0maafa27rard6r62rc7iv5mcn2g0vvv6kw5as1kbf7mr4q1ph6sm";
    inherit dependencies buildDependencies features;
  };
  miow_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miow";
    version = "0.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "14f8zkc6ix7mkyis1vsqnim8m29b6l55abkba3p2yz7j1ibcvrl0";
    inherit dependencies buildDependencies features;
  };
  native_tls_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "native-tls";
    version = "0.1.4";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0q5y5i96mfpjbhx8y7w9rdq65mksw67m60bw4xqlybc8y6jkr99v";
    inherit dependencies buildDependencies features;
  };
  net2_0_2_31_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "net2";
    version = "0.2.31";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "13mphllfcbybsdqyi1jb3kyqx65m8ch07drr59a4wb3yl89awm7y";
    inherit dependencies buildDependencies features;
  };
  num_0_1_41_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num";
    version = "0.1.41";
    authors = [ "The Rust Project Developers" ];
    sha256 = "05v5llf5yl4y1i89jcgqr6gwxhylrgrpv0n440c3lya7hwng9s73";
    inherit dependencies buildDependencies features;
  };
  num_integer_0_1_35_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num-integer";
    version = "0.1.35";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0xybj8isi9b6wc646d5rc043i8l8j6wy0vrl4pn995qms9fxbbcc";
    inherit dependencies buildDependencies features;
  };
  num_iter_0_1_34_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num-iter";
    version = "0.1.34";
    authors = [ "The Rust Project Developers" ];
    sha256 = "02cld7x9dzbqbs6sxxzq1i22z3awlcd6ljkgvhkfr9rsnaxphzl9";
    inherit dependencies buildDependencies features;
  };
  num_traits_0_1_41_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num-traits";
    version = "0.1.41";
    authors = [ "The Rust Project Developers" ];
    sha256 = "134gv890n1gv8v0jys55k0940gqp2hibgf1fs8q9jmyk2xp1jp9m";
    inherit dependencies buildDependencies features;
  };
  openssl_0_9_22_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl";
    version = "0.9.22";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1knzs1fqh0izijc9d0jz35x9vv5bfjg1rkngpvbkfyjsmsasym71";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  openssl_sys_0_9_22_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-sys";
    version = "0.9.22";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1l2zp6nb9073kxmpq076c5x82w6mwkb4cpsrm5y2j6dnf7aywrn3";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  percent_encoding_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "percent-encoding";
    version = "1.0.1";
    authors = [ "The rust-url developers" ];
    sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  pkg_config_0_3_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "pkg-config";
    version = "0.3.9";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "06k8fxgrsrxj8mjpjcq1n7mn2p1shpxif4zg9y5h09c7vy20s146";
    inherit dependencies buildDependencies features;
  };
  quote_0_3_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quote";
    version = "0.3.15";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "09il61jv4kd1360spaj46qwyl21fv1qz18fsv2jra8wdnlgl5jsg";
    inherit dependencies buildDependencies features;
  };
  rand_0_3_18_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.3.18";
    authors = [ "The Rust Project Developers" ];
    sha256 = "15d7c3myn968dzjs0a2pgv58hzdavxnq6swgj032lw2v966ir4xv";
    inherit dependencies buildDependencies features;
  };
  redox_syscall_0_1_32_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_syscall";
    version = "0.1.32";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "1axxj8x6ngh6npkzqc5h216fajkcyrdxdgb7m2f0n5xfclbk47fv";
    libName = "syscall";
    inherit dependencies buildDependencies features;
  };
  regex_0_1_80_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex";
    version = "0.1.80";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0y4s8ghhx6sgzb35irwivm3w0l2hhqhmdcd2px9hirqnkagal9l6";
    inherit dependencies buildDependencies features;
  };
  regex_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex";
    version = "0.2.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "11a4ysci7qn336990wr20hsr2420f22hh28zcf0a90hfi3kx430z";
    inherit dependencies buildDependencies features;
  };
  regex_syntax_0_3_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex-syntax";
    version = "0.3.9";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1mzhphkbwppwd1zam2jkgjk550cqgf6506i87bw2yzrvcsraiw7m";
    inherit dependencies buildDependencies features;
  };
  regex_syntax_0_4_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex-syntax";
    version = "0.4.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "01yrsm68lj86ad1whgg1z95c2pfsvv58fz8qjcgw7mlszc0c08ls";
    inherit dependencies buildDependencies features;
  };
  rustc_demangle_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustc-demangle";
    version = "0.1.5";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "096kkcx9j747700fhxj1s4rlwkj21pqjmvj64psdj6bakb2q13nc";
    inherit dependencies buildDependencies features;
  };
  schannel_0_1_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "schannel";
    version = "0.1.9";
    authors = [ "Steven Fackler <sfackler@gmail.com>" "Steffen Butzer <steffen.butzer@outlook.com>" ];
    sha256 = "0gcbcq9sj1c1qkncwadp3azfnzkn0115dycjmbw00zcj4jdl35a0";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  scoped_tls_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scoped-tls";
    version = "0.1.0";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1j8azxa15srljafrg7wc221npvxb3700sbfk6jjav0rw2zclsnf5";
    inherit dependencies buildDependencies features;
  };
  secur32_sys_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "secur32-sys";
    version = "0.2.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0sp46ix9mx1156bidpfiq30xxsgmpva5jffls3259kxjqlxifcnx";
    libName = "secur32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  security_framework_0_1_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "security-framework";
    version = "0.1.16";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1kxczsaj8gz4922jl5af2gkxh71rasb6khaf3dp7ldlnw9qf2sbm";
    inherit dependencies buildDependencies features;
  };
  security_framework_sys_0_1_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "security-framework-sys";
    version = "0.1.16";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0ai2pivdr5fyc7czbkpcrwap0imyy0r8ndarrl3n5kiv0jha1js3";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  serde_1_0_23_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde";
    version = "1.0.23";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1jk2jggxns1hafws8nbykpfplz1rv9hgql2dm3s1v27dq1gdpar6";
    inherit dependencies buildDependencies features;
  };
  serde_derive_1_0_23_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_derive";
    version = "1.0.23";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0bdrwxpl00crl6y2m9yhgp1iqhw0h19fp5ygf84viy5krjcq1kj7";
    procMacro = true;
    inherit dependencies buildDependencies features;
  };
  serde_derive_internals_0_17_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_derive_internals";
    version = "0.17.0";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1g1j3v6pj9wbcz3v3w4smjpwrcdwjicmf6yd5cbai04as9iwhw74";
    inherit dependencies buildDependencies features;
  };
  serde_json_1_0_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_json";
    version = "1.0.7";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0gbga4sbhysa0pawrpmvz5yr7sgwcc6rp5izhb81h82hd1nfw3mq";
    inherit dependencies buildDependencies features;
  };
  slab_0_3_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "slab";
    version = "0.3.0";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0y6lhjggksh57hyfd3l6p9wgv5nhvw9c6djrysq7jnalz8fih21k";
    inherit dependencies buildDependencies features;
  };
  slab_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "slab";
    version = "0.4.0";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1qy2vkgwqgj5z4ygdkh040n9yh1vz80v5flxb1xrvw3i4wxs7yx0";
    inherit dependencies buildDependencies features;
  };
  syn_0_11_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "syn";
    version = "0.11.11";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0yw8ng7x1dn5a6ykg0ib49y7r9nhzgpiq2989rqdp7rdz3n85502";
    inherit dependencies buildDependencies features;
  };
  synom_0_11_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "synom";
    version = "0.11.3";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1l6d1s9qjfp6ng2s2z8219igvlv7gyk8gby97sdykqc1r93d8rhc";
    inherit dependencies buildDependencies features;
  };
  tempdir_0_3_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tempdir";
    version = "0.3.5";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0rirc5prqppzgd15fm8ayan349lgk2k5iqdkrbwrwrv5pm4znsnz";
    inherit dependencies buildDependencies features;
  };
  thread_id_2_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "thread-id";
    version = "2.0.0";
    authors = [ "Ruud van Asseldonk <dev@veniogames.com>" ];
    sha256 = "06i3c8ckn97i5rp16civ2vpqbknlkx66dkrl070iw60nawi0kjc3";
    inherit dependencies buildDependencies features;
  };
  thread_local_0_2_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "thread_local";
    version = "0.2.7";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "19p0zrs24rdwjvpi10jig5ms3sxj00pv8shkr9cpddri8cdghqp7";
    inherit dependencies buildDependencies features;
  };
  thread_local_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "thread_local";
    version = "0.3.4";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "1y6cwyhhx2nkz4b3dziwhqdvgq830z8wjp32b40pjd8r0hxqv2jr";
    inherit dependencies buildDependencies features;
  };
  time_0_1_38_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "time";
    version = "0.1.38";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1ws283vvz7c6jfiwn53rmc6kybapr4pjaahfxxrz232b0qzw7gcp";
    inherit dependencies buildDependencies features;
  };
  tokio_core_0_1_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-core";
    version = "0.1.10";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "005mpg94zgygpk2iib9sg9xi4wxsk8r9gpwbsdvfz4fzs3p6l596";
    inherit dependencies buildDependencies features;
  };
  tokio_io_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-io";
    version = "0.1.4";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0cq5m0mvkn6kxqw7qnwliq3yimxdbcqfdlwn7xkrik8w8xlb3m6p";
    inherit dependencies buildDependencies features;
  };
  tokio_mockstream_1_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-mockstream";
    version = "1.1.0";
    authors = [ "Aaron Weiss <awe@pdgn.co>" ];
    sha256 = "1h7g3rgpp1aih8yjz3q35cvzxsnx84lb9k32wnazwb6x03pv38fv";
    inherit dependencies buildDependencies features;
  };
  tokio_timer_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-timer";
    version = "0.1.2";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0ngmxv7dzzkbs9bs39wzx11527hanpjdlyvi6gdxzi9q41q0kz7y";
    inherit dependencies buildDependencies features;
  };
  tokio_tls_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-tls";
    version = "0.1.3";
    authors = [ "Carl Lerche <me@carllerche.com>" "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0ib58y81qr64m3gg0pn7k06b71r8b05cmvakzpgfqdsw0qj08sva";
    inherit dependencies buildDependencies features;
  };
  toml_0_4_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "toml";
    version = "0.4.5";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "06zxqhn3y58yzjfaykhcrvlf7p2dnn54kn3g4apmja3cn5b18lkk";
    inherit dependencies buildDependencies features;
  };
  unicode_bidi_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-bidi";
    version = "0.3.4";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
    libName = "unicode_bidi";
    inherit dependencies buildDependencies features;
  };
  unicode_normalization_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-normalization";
    version = "0.1.5";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "0hg29g86fca7b65mwk4sm5s838js6bqrl0gabadbazvbsgjam0j5";
    inherit dependencies buildDependencies features;
  };
  unicode_xid_0_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-xid";
    version = "0.0.4";
    authors = [ "erick.tryzelaar <erick.tryzelaar@gmail.com>" "kwantam <kwantam@gmail.com>" ];
    sha256 = "1dc8wkkcd3s6534s5aw4lbjn8m67flkkbnajp5bl8408wdg8rh9v";
    inherit dependencies buildDependencies features;
  };
  unreachable_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unreachable";
    version = "1.0.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1am8czbk5wwr25gbp2zr007744fxjshhdqjz9liz7wl4pnv3whcf";
    inherit dependencies buildDependencies features;
  };
  url_1_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "url";
    version = "1.6.0";
    authors = [ "The rust-url developers" ];
    sha256 = "1bvzl4dvjj84h46ai3x23wyafa2wwhchj08vr2brf25dxwc7mg18";
    inherit dependencies buildDependencies features;
  };
  utf8_ranges_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "utf8-ranges";
    version = "0.1.3";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1cj548a91a93j8375p78qikaiam548xh84cb0ck8y119adbmsvbp";
    inherit dependencies buildDependencies features;
  };
  utf8_ranges_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "utf8-ranges";
    version = "1.0.0";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0rzmqprwjv9yp1n0qqgahgm24872x6c0xddfym5pfndy7a36vkn0";
    inherit dependencies buildDependencies features;
  };
  vcpkg_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "vcpkg";
    version = "0.2.2";
    authors = [ "Jim McGrath <jimmc2@gmail.com>" ];
    sha256 = "1fl5j0ksnwrnsrf1b1a9lqbjgnajdipq0030vsbhx81mb7d9478a";
    inherit dependencies buildDependencies features;
  };
  void_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "void";
    version = "1.0.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "0h1dm0dx8dhf56a83k68mijyxigqhizpskwxfdrs1drwv2cdclv3";
    inherit dependencies buildDependencies features;
  };
  winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.2.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
    inherit dependencies buildDependencies features;
  };
  winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-build";
    version = "0.1.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
    libName = "build";
    inherit dependencies buildDependencies features;
  };
  ws2_32_sys_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ws2_32-sys";
    version = "0.2.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1zpy9d9wk11sj17fczfngcj28w4xxjs3b4n036yzpy38dxp4f7kc";
    libName = "ws2_32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  advapi32_sys_0_2_0 = { features?(advapi32_sys_0_2_0_features {}) }: advapi32_sys_0_2_0_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  advapi32_sys_0_2_0_features = f: updateFeatures f (rec {
    advapi32_sys_0_2_0.default = (f.advapi32_sys_0_2_0.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  aho_corasick_0_5_3 = { features?(aho_corasick_0_5_3_features {}) }: aho_corasick_0_5_3_ {
    dependencies = mapFeatures features ([ memchr_0_1_11 ]);
  };
  aho_corasick_0_5_3_features = f: updateFeatures f (rec {
    aho_corasick_0_5_3.default = (f.aho_corasick_0_5_3.default or true);
    memchr_0_1_11.default = true;
  }) [ memchr_0_1_11_features ];
  aho_corasick_0_6_4 = { features?(aho_corasick_0_6_4_features {}) }: aho_corasick_0_6_4_ {
    dependencies = mapFeatures features ([ memchr_2_0_1 ]);
  };
  aho_corasick_0_6_4_features = f: updateFeatures f (rec {
    aho_corasick_0_6_4.default = (f.aho_corasick_0_6_4.default or true);
    memchr_2_0_1.default = true;
  }) [ memchr_2_0_1_features ];
  amq_proto_0_1_0 = { features?(amq_proto_0_1_0_features {}) }: amq_proto_0_1_0_ {
    dependencies = mapFeatures features ([ bit_vec_0_4_4 byteorder_0_5_3 enum_primitive_0_1_1 env_logger_0_3_5 error_chain_0_10_0 log_0_3_8 ]);
  };
  amq_proto_0_1_0_features = f: updateFeatures f (rec {
    amq_proto_0_1_0.default = (f.amq_proto_0_1_0.default or true);
    bit_vec_0_4_4.default = true;
    byteorder_0_5_3.default = true;
    enum_primitive_0_1_1.default = true;
    env_logger_0_3_5.default = true;
    error_chain_0_10_0.default = true;
    log_0_3_8.default = true;
  }) [ bit_vec_0_4_4_features byteorder_0_5_3_features enum_primitive_0_1_1_features env_logger_0_3_5_features error_chain_0_10_0_features log_0_3_8_features ];
  amqp_0_1_0 = { features?(amqp_0_1_0_features {}) }: amqp_0_1_0_ {
    dependencies = mapFeatures features ([ amq_proto_0_1_0 env_logger_0_3_5 log_0_3_8 url_1_6_0 ]
      ++ (if features.amqp_0_1_0.openssl or false then [ openssl_0_9_22 ] else []));
    features = mkFeatures (features.amqp_0_1_0 or {});
  };
  amqp_0_1_0_features = f: updateFeatures f (rec {
    amq_proto_0_1_0.default = true;
    amqp_0_1_0.default = (f.amqp_0_1_0.default or true);
    amqp_0_1_0.openssl =
      (f.amqp_0_1_0.openssl or false) ||
      (f.amqp_0_1_0.tls or false) ||
      (amqp_0_1_0.tls or false);
    amqp_0_1_0.tls =
      (f.amqp_0_1_0.tls or false) ||
      (f.amqp_0_1_0.default or false) ||
      (amqp_0_1_0.default or false);
    env_logger_0_3_5.default = true;
    log_0_3_8.default = true;
    openssl_0_9_22.default = true;
    url_1_6_0.default = true;
  }) [ amq_proto_0_1_0_features env_logger_0_3_5_features log_0_3_8_features openssl_0_9_22_features url_1_6_0_features ];
  backtrace_0_3_4 = { features?(backtrace_0_3_4_features {}) }: backtrace_0_3_4_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_2 rustc_demangle_0_1_5 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "fuchsia") && !(kernel == "emscripten") && !(kernel == "darwin") && !(kernel == "ios") then mapFeatures features ([ ]
      ++ (if features.backtrace_0_3_4.backtrace-sys or false then [ backtrace_sys_0_1_16 ] else [])) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_34 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ ]
      ++ (if features.backtrace_0_3_4.dbghelp-sys or false then [ dbghelp_sys_0_2_0 ] else [])
      ++ (if features.backtrace_0_3_4.kernel32-sys or false then [ kernel32_sys_0_2_2 ] else [])
      ++ (if features.backtrace_0_3_4.winapi or false then [ winapi_0_2_8 ] else [])) else []);
    features = mkFeatures (features.backtrace_0_3_4 or {});
  };
  backtrace_0_3_4_features = f: updateFeatures f (rec {
    backtrace_0_3_4.addr2line =
      (f.backtrace_0_3_4.addr2line or false) ||
      (f.backtrace_0_3_4.gimli-symbolize or false) ||
      (backtrace_0_3_4.gimli-symbolize or false);
    backtrace_0_3_4.backtrace-sys =
      (f.backtrace_0_3_4.backtrace-sys or false) ||
      (f.backtrace_0_3_4.libbacktrace or false) ||
      (backtrace_0_3_4.libbacktrace or false);
    backtrace_0_3_4.coresymbolication =
      (f.backtrace_0_3_4.coresymbolication or false) ||
      (f.backtrace_0_3_4.default or false) ||
      (backtrace_0_3_4.default or false);
    backtrace_0_3_4.dbghelp =
      (f.backtrace_0_3_4.dbghelp or false) ||
      (f.backtrace_0_3_4.default or false) ||
      (backtrace_0_3_4.default or false);
    backtrace_0_3_4.dbghelp-sys =
      (f.backtrace_0_3_4.dbghelp-sys or false) ||
      (f.backtrace_0_3_4.dbghelp or false) ||
      (backtrace_0_3_4.dbghelp or false);
    backtrace_0_3_4.default = (f.backtrace_0_3_4.default or true);
    backtrace_0_3_4.dladdr =
      (f.backtrace_0_3_4.dladdr or false) ||
      (f.backtrace_0_3_4.default or false) ||
      (backtrace_0_3_4.default or false);
    backtrace_0_3_4.findshlibs =
      (f.backtrace_0_3_4.findshlibs or false) ||
      (f.backtrace_0_3_4.gimli-symbolize or false) ||
      (backtrace_0_3_4.gimli-symbolize or false);
    backtrace_0_3_4.kernel32-sys =
      (f.backtrace_0_3_4.kernel32-sys or false) ||
      (f.backtrace_0_3_4.dbghelp or false) ||
      (backtrace_0_3_4.dbghelp or false);
    backtrace_0_3_4.libbacktrace =
      (f.backtrace_0_3_4.libbacktrace or false) ||
      (f.backtrace_0_3_4.default or false) ||
      (backtrace_0_3_4.default or false);
    backtrace_0_3_4.libunwind =
      (f.backtrace_0_3_4.libunwind or false) ||
      (f.backtrace_0_3_4.default or false) ||
      (backtrace_0_3_4.default or false);
    backtrace_0_3_4.rustc-serialize =
      (f.backtrace_0_3_4.rustc-serialize or false) ||
      (f.backtrace_0_3_4.serialize-rustc or false) ||
      (backtrace_0_3_4.serialize-rustc or false);
    backtrace_0_3_4.serde =
      (f.backtrace_0_3_4.serde or false) ||
      (f.backtrace_0_3_4.serialize-serde or false) ||
      (backtrace_0_3_4.serialize-serde or false);
    backtrace_0_3_4.serde_derive =
      (f.backtrace_0_3_4.serde_derive or false) ||
      (f.backtrace_0_3_4.serialize-serde or false) ||
      (backtrace_0_3_4.serialize-serde or false);
    backtrace_0_3_4.winapi =
      (f.backtrace_0_3_4.winapi or false) ||
      (f.backtrace_0_3_4.dbghelp or false) ||
      (backtrace_0_3_4.dbghelp or false);
    backtrace_sys_0_1_16.default = true;
    cfg_if_0_1_2.default = true;
    dbghelp_sys_0_2_0.default = true;
    kernel32_sys_0_2_2.default = true;
    libc_0_2_34.default = true;
    rustc_demangle_0_1_5.default = true;
    winapi_0_2_8.default = true;
  }) [ cfg_if_0_1_2_features rustc_demangle_0_1_5_features backtrace_sys_0_1_16_features libc_0_2_34_features dbghelp_sys_0_2_0_features kernel32_sys_0_2_2_features winapi_0_2_8_features ];
  backtrace_sys_0_1_16 = { features?(backtrace_sys_0_1_16_features {}) }: backtrace_sys_0_1_16_ {
    dependencies = mapFeatures features ([ libc_0_2_34 ]);
    buildDependencies = mapFeatures features ([ cc_1_0_3 ]);
  };
  backtrace_sys_0_1_16_features = f: updateFeatures f (rec {
    backtrace_sys_0_1_16.default = (f.backtrace_sys_0_1_16.default or true);
    cc_1_0_3.default = true;
    libc_0_2_34.default = true;
  }) [ libc_0_2_34_features cc_1_0_3_features ];
  bit_vec_0_4_4 = { features?(bit_vec_0_4_4_features {}) }: bit_vec_0_4_4_ {
    features = mkFeatures (features.bit_vec_0_4_4 or {});
  };
  bit_vec_0_4_4_features = f: updateFeatures f (rec {
    bit_vec_0_4_4.default = (f.bit_vec_0_4_4.default or true);
  }) [];
  bitflags_0_7_0 = { features?(bitflags_0_7_0_features {}) }: bitflags_0_7_0_ {};
  bitflags_0_7_0_features = f: updateFeatures f (rec {
    bitflags_0_7_0.default = (f.bitflags_0_7_0.default or true);
  }) [];
  bitflags_0_9_1 = { features?(bitflags_0_9_1_features {}) }: bitflags_0_9_1_ {
    features = mkFeatures (features.bitflags_0_9_1 or {});
  };
  bitflags_0_9_1_features = f: updateFeatures f (rec {
    bitflags_0_9_1.default = (f.bitflags_0_9_1.default or true);
    bitflags_0_9_1.example_generated =
      (f.bitflags_0_9_1.example_generated or false) ||
      (f.bitflags_0_9_1.default or false) ||
      (bitflags_0_9_1.default or false);
  }) [];
  bufstream_0_1_3 = { features?(bufstream_0_1_3_features {}) }: bufstream_0_1_3_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.bufstream_0_1_3 or {});
  };
  bufstream_0_1_3_features = f: updateFeatures f (rec {
    bufstream_0_1_3.default = (f.bufstream_0_1_3.default or true);
    bufstream_0_1_3.futures =
      (f.bufstream_0_1_3.futures or false) ||
      (f.bufstream_0_1_3.tokio or false) ||
      (bufstream_0_1_3.tokio or false);
    bufstream_0_1_3.tokio-io =
      (f.bufstream_0_1_3.tokio-io or false) ||
      (f.bufstream_0_1_3.tokio or false) ||
      (bufstream_0_1_3.tokio or false);
  }) [];
  byteorder_0_5_3 = { features?(byteorder_0_5_3_features {}) }: byteorder_0_5_3_ {
    features = mkFeatures (features.byteorder_0_5_3 or {});
  };
  byteorder_0_5_3_features = f: updateFeatures f (rec {
    byteorder_0_5_3.default = (f.byteorder_0_5_3.default or true);
    byteorder_0_5_3.std =
      (f.byteorder_0_5_3.std or false) ||
      (f.byteorder_0_5_3.default or false) ||
      (byteorder_0_5_3.default or false);
  }) [];
  byteorder_1_2_1 = { features?(byteorder_1_2_1_features {}) }: byteorder_1_2_1_ {
    features = mkFeatures (features.byteorder_1_2_1 or {});
  };
  byteorder_1_2_1_features = f: updateFeatures f (rec {
    byteorder_1_2_1.default = (f.byteorder_1_2_1.default or true);
    byteorder_1_2_1.std =
      (f.byteorder_1_2_1.std or false) ||
      (f.byteorder_1_2_1.default or false) ||
      (byteorder_1_2_1.default or false);
  }) [];
  bytes_0_4_5 = { features?(bytes_0_4_5_features {}) }: bytes_0_4_5_ {
    dependencies = mapFeatures features ([ byteorder_1_2_1 iovec_0_1_1 ]);
  };
  bytes_0_4_5_features = f: updateFeatures f (rec {
    byteorder_1_2_1.default = true;
    bytes_0_4_5.default = (f.bytes_0_4_5.default or true);
    iovec_0_1_1.default = true;
  }) [ byteorder_1_2_1_features iovec_0_1_1_features ];
  cc_1_0_3 = { features?(cc_1_0_3_features {}) }: cc_1_0_3_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.cc_1_0_3 or {});
  };
  cc_1_0_3_features = f: updateFeatures f (rec {
    cc_1_0_3.default = (f.cc_1_0_3.default or true);
    cc_1_0_3.rayon =
      (f.cc_1_0_3.rayon or false) ||
      (f.cc_1_0_3.parallel or false) ||
      (cc_1_0_3.parallel or false);
  }) [];
  cfg_if_0_1_2 = { features?(cfg_if_0_1_2_features {}) }: cfg_if_0_1_2_ {};
  cfg_if_0_1_2_features = f: updateFeatures f (rec {
    cfg_if_0_1_2.default = (f.cfg_if_0_1_2.default or true);
  }) [];
  chrono_0_4_0 = { features?(chrono_0_4_0_features {}) }: chrono_0_4_0_ {
    dependencies = mapFeatures features ([ num_0_1_41 time_0_1_38 ]);
  };
  chrono_0_4_0_features = f: updateFeatures f (rec {
    chrono_0_4_0.default = (f.chrono_0_4_0.default or true);
    num_0_1_41.default = (f.num_0_1_41.default or false);
    time_0_1_38.default = true;
  }) [ num_0_1_41_features time_0_1_38_features ];
  core_foundation_0_2_3 = { features?(core_foundation_0_2_3_features {}) }: core_foundation_0_2_3_ {
    dependencies = mapFeatures features ([ core_foundation_sys_0_2_3 libc_0_2_34 ]);
  };
  core_foundation_0_2_3_features = f: updateFeatures f (rec {
    core_foundation_0_2_3.default = (f.core_foundation_0_2_3.default or true);
    core_foundation_sys_0_2_3.default = true;
    libc_0_2_34.default = true;
  }) [ core_foundation_sys_0_2_3_features libc_0_2_34_features ];
  core_foundation_sys_0_2_3 = { features?(core_foundation_sys_0_2_3_features {}) }: core_foundation_sys_0_2_3_ {
    dependencies = mapFeatures features ([ libc_0_2_34 ]);
  };
  core_foundation_sys_0_2_3_features = f: updateFeatures f (rec {
    core_foundation_sys_0_2_3.default = (f.core_foundation_sys_0_2_3.default or true);
    libc_0_2_34.default = true;
  }) [ libc_0_2_34_features ];
  crypt32_sys_0_2_0 = { features?(crypt32_sys_0_2_0_features {}) }: crypt32_sys_0_2_0_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  crypt32_sys_0_2_0_features = f: updateFeatures f (rec {
    crypt32_sys_0_2_0.default = (f.crypt32_sys_0_2_0.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  dbghelp_sys_0_2_0 = { features?(dbghelp_sys_0_2_0_features {}) }: dbghelp_sys_0_2_0_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  dbghelp_sys_0_2_0_features = f: updateFeatures f (rec {
    dbghelp_sys_0_2_0.default = (f.dbghelp_sys_0_2_0.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  dtoa_0_4_2 = { features?(dtoa_0_4_2_features {}) }: dtoa_0_4_2_ {};
  dtoa_0_4_2_features = f: updateFeatures f (rec {
    dtoa_0_4_2.default = (f.dtoa_0_4_2.default or true);
  }) [];
  encoding_0_2_33 = { features?(encoding_0_2_33_features {}) }: encoding_0_2_33_ {
    dependencies = mapFeatures features ([ encoding_index_japanese_1_20141219_5 encoding_index_korean_1_20141219_5 encoding_index_simpchinese_1_20141219_5 encoding_index_singlebyte_1_20141219_5 encoding_index_tradchinese_1_20141219_5 ]);
  };
  encoding_0_2_33_features = f: updateFeatures f (rec {
    encoding_0_2_33.default = (f.encoding_0_2_33.default or true);
    encoding_index_japanese_1_20141219_5.default = true;
    encoding_index_korean_1_20141219_5.default = true;
    encoding_index_simpchinese_1_20141219_5.default = true;
    encoding_index_singlebyte_1_20141219_5.default = true;
    encoding_index_tradchinese_1_20141219_5.default = true;
  }) [ encoding_index_japanese_1_20141219_5_features encoding_index_korean_1_20141219_5_features encoding_index_simpchinese_1_20141219_5_features encoding_index_singlebyte_1_20141219_5_features encoding_index_tradchinese_1_20141219_5_features ];
  encoding_index_japanese_1_20141219_5 = { features?(encoding_index_japanese_1_20141219_5_features {}) }: encoding_index_japanese_1_20141219_5_ {
    dependencies = mapFeatures features ([ encoding_index_tests_0_1_4 ]);
  };
  encoding_index_japanese_1_20141219_5_features = f: updateFeatures f (rec {
    encoding_index_japanese_1_20141219_5.default = (f.encoding_index_japanese_1_20141219_5.default or true);
    encoding_index_tests_0_1_4.default = true;
  }) [ encoding_index_tests_0_1_4_features ];
  encoding_index_korean_1_20141219_5 = { features?(encoding_index_korean_1_20141219_5_features {}) }: encoding_index_korean_1_20141219_5_ {
    dependencies = mapFeatures features ([ encoding_index_tests_0_1_4 ]);
  };
  encoding_index_korean_1_20141219_5_features = f: updateFeatures f (rec {
    encoding_index_korean_1_20141219_5.default = (f.encoding_index_korean_1_20141219_5.default or true);
    encoding_index_tests_0_1_4.default = true;
  }) [ encoding_index_tests_0_1_4_features ];
  encoding_index_simpchinese_1_20141219_5 = { features?(encoding_index_simpchinese_1_20141219_5_features {}) }: encoding_index_simpchinese_1_20141219_5_ {
    dependencies = mapFeatures features ([ encoding_index_tests_0_1_4 ]);
  };
  encoding_index_simpchinese_1_20141219_5_features = f: updateFeatures f (rec {
    encoding_index_simpchinese_1_20141219_5.default = (f.encoding_index_simpchinese_1_20141219_5.default or true);
    encoding_index_tests_0_1_4.default = true;
  }) [ encoding_index_tests_0_1_4_features ];
  encoding_index_singlebyte_1_20141219_5 = { features?(encoding_index_singlebyte_1_20141219_5_features {}) }: encoding_index_singlebyte_1_20141219_5_ {
    dependencies = mapFeatures features ([ encoding_index_tests_0_1_4 ]);
  };
  encoding_index_singlebyte_1_20141219_5_features = f: updateFeatures f (rec {
    encoding_index_singlebyte_1_20141219_5.default = (f.encoding_index_singlebyte_1_20141219_5.default or true);
    encoding_index_tests_0_1_4.default = true;
  }) [ encoding_index_tests_0_1_4_features ];
  encoding_index_tradchinese_1_20141219_5 = { features?(encoding_index_tradchinese_1_20141219_5_features {}) }: encoding_index_tradchinese_1_20141219_5_ {
    dependencies = mapFeatures features ([ encoding_index_tests_0_1_4 ]);
  };
  encoding_index_tradchinese_1_20141219_5_features = f: updateFeatures f (rec {
    encoding_index_tests_0_1_4.default = true;
    encoding_index_tradchinese_1_20141219_5.default = (f.encoding_index_tradchinese_1_20141219_5.default or true);
  }) [ encoding_index_tests_0_1_4_features ];
  encoding_index_tests_0_1_4 = { features?(encoding_index_tests_0_1_4_features {}) }: encoding_index_tests_0_1_4_ {};
  encoding_index_tests_0_1_4_features = f: updateFeatures f (rec {
    encoding_index_tests_0_1_4.default = (f.encoding_index_tests_0_1_4.default or true);
  }) [];
  enum_primitive_0_1_1 = { features?(enum_primitive_0_1_1_features {}) }: enum_primitive_0_1_1_ {
    dependencies = mapFeatures features ([ num_traits_0_1_41 ]);
  };
  enum_primitive_0_1_1_features = f: updateFeatures f (rec {
    enum_primitive_0_1_1.default = (f.enum_primitive_0_1_1.default or true);
    num_traits_0_1_41.default = (f.num_traits_0_1_41.default or false);
  }) [ num_traits_0_1_41_features ];
  env_logger_0_3_5 = { features?(env_logger_0_3_5_features {}) }: env_logger_0_3_5_ {
    dependencies = mapFeatures features ([ log_0_3_8 ]
      ++ (if features.env_logger_0_3_5.regex or false then [ regex_0_1_80 ] else []));
    features = mkFeatures (features.env_logger_0_3_5 or {});
  };
  env_logger_0_3_5_features = f: updateFeatures f (rec {
    env_logger_0_3_5.default = (f.env_logger_0_3_5.default or true);
    env_logger_0_3_5.regex =
      (f.env_logger_0_3_5.regex or false) ||
      (f.env_logger_0_3_5.default or false) ||
      (env_logger_0_3_5.default or false);
    log_0_3_8.default = true;
    regex_0_1_80.default = true;
  }) [ log_0_3_8_features regex_0_1_80_features ];
  env_logger_0_4_3 = { features?(env_logger_0_4_3_features {}) }: env_logger_0_4_3_ {
    dependencies = mapFeatures features ([ log_0_3_8 ]
      ++ (if features.env_logger_0_4_3.regex or false then [ regex_0_2_3 ] else []));
    features = mkFeatures (features.env_logger_0_4_3 or {});
  };
  env_logger_0_4_3_features = f: updateFeatures f (rec {
    env_logger_0_4_3.default = (f.env_logger_0_4_3.default or true);
    env_logger_0_4_3.regex =
      (f.env_logger_0_4_3.regex or false) ||
      (f.env_logger_0_4_3.default or false) ||
      (env_logger_0_4_3.default or false);
    log_0_3_8.default = true;
    regex_0_2_3.default = true;
  }) [ log_0_3_8_features regex_0_2_3_features ];
  error_chain_0_10_0 = { features?(error_chain_0_10_0_features {}) }: error_chain_0_10_0_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.error_chain_0_10_0.backtrace or false then [ backtrace_0_3_4 ] else []));
    features = mkFeatures (features.error_chain_0_10_0 or {});
  };
  error_chain_0_10_0_features = f: updateFeatures f (rec {
    backtrace_0_3_4.default = true;
    error_chain_0_10_0.backtrace =
      (f.error_chain_0_10_0.backtrace or false) ||
      (f.error_chain_0_10_0.default or false) ||
      (error_chain_0_10_0.default or false);
    error_chain_0_10_0.default = (f.error_chain_0_10_0.default or true);
    error_chain_0_10_0.example_generated =
      (f.error_chain_0_10_0.example_generated or false) ||
      (f.error_chain_0_10_0.default or false) ||
      (error_chain_0_10_0.default or false);
  }) [ backtrace_0_3_4_features ];
  foreign_types_0_3_2 = { features?(foreign_types_0_3_2_features {}) }: foreign_types_0_3_2_ {
    dependencies = mapFeatures features ([ foreign_types_shared_0_1_1 ]);
  };
  foreign_types_0_3_2_features = f: updateFeatures f (rec {
    foreign_types_0_3_2.default = (f.foreign_types_0_3_2.default or true);
    foreign_types_shared_0_1_1.default = true;
  }) [ foreign_types_shared_0_1_1_features ];
  foreign_types_shared_0_1_1 = { features?(foreign_types_shared_0_1_1_features {}) }: foreign_types_shared_0_1_1_ {};
  foreign_types_shared_0_1_1_features = f: updateFeatures f (rec {
    foreign_types_shared_0_1_1.default = (f.foreign_types_shared_0_1_1.default or true);
  }) [];
  fuchsia_zircon_0_2_1 = { features?(fuchsia_zircon_0_2_1_features {}) }: fuchsia_zircon_0_2_1_ {
    dependencies = mapFeatures features ([ fuchsia_zircon_sys_0_2_0 ]);
  };
  fuchsia_zircon_0_2_1_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_2_1.default = (f.fuchsia_zircon_0_2_1.default or true);
    fuchsia_zircon_sys_0_2_0.default = true;
  }) [ fuchsia_zircon_sys_0_2_0_features ];
  fuchsia_zircon_sys_0_2_0 = { features?(fuchsia_zircon_sys_0_2_0_features {}) }: fuchsia_zircon_sys_0_2_0_ {
    dependencies = mapFeatures features ([ bitflags_0_7_0 ]);
  };
  fuchsia_zircon_sys_0_2_0_features = f: updateFeatures f (rec {
    bitflags_0_7_0.default = true;
    fuchsia_zircon_sys_0_2_0.default = (f.fuchsia_zircon_sys_0_2_0.default or true);
  }) [ bitflags_0_7_0_features ];
  futures_0_1_17 = { features?(futures_0_1_17_features {}) }: futures_0_1_17_ {
    features = mkFeatures (features.futures_0_1_17 or {});
  };
  futures_0_1_17_features = f: updateFeatures f (rec {
    futures_0_1_17.default = (f.futures_0_1_17.default or true);
    futures_0_1_17.use_std =
      (f.futures_0_1_17.use_std or false) ||
      (f.futures_0_1_17.default or false) ||
      (futures_0_1_17.default or false);
    futures_0_1_17.with-deprecated =
      (f.futures_0_1_17.with-deprecated or false) ||
      (f.futures_0_1_17.default or false) ||
      (futures_0_1_17.default or false);
  }) [];
  idna_0_1_4 = { features?(idna_0_1_4_features {}) }: idna_0_1_4_ {
    dependencies = mapFeatures features ([ matches_0_1_6 unicode_bidi_0_3_4 unicode_normalization_0_1_5 ]);
  };
  idna_0_1_4_features = f: updateFeatures f (rec {
    idna_0_1_4.default = (f.idna_0_1_4.default or true);
    matches_0_1_6.default = true;
    unicode_bidi_0_3_4.default = true;
    unicode_normalization_0_1_5.default = true;
  }) [ matches_0_1_6_features unicode_bidi_0_3_4_features unicode_normalization_0_1_5_features ];
  iovec_0_1_1 = { features?(iovec_0_1_1_features {}) }: iovec_0_1_1_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_34 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_2_8 ]) else []);
  };
  iovec_0_1_1_features = f: updateFeatures f (rec {
    iovec_0_1_1.default = (f.iovec_0_1_1.default or true);
    libc_0_2_34.default = true;
    winapi_0_2_8.default = true;
  }) [ libc_0_2_34_features winapi_0_2_8_features ];
  irc_0_12_5 = { features?(irc_0_12_5_features {}) }: irc_0_12_5_ {
    dependencies = mapFeatures features ([ bufstream_0_1_3 bytes_0_4_5 chrono_0_4_0 encoding_0_2_33 error_chain_0_10_0 futures_0_1_17 native_tls_0_1_4 serde_1_0_23 serde_derive_1_0_23 tokio_core_0_1_10 tokio_io_0_1_4 tokio_mockstream_1_1_0 tokio_timer_0_1_2 tokio_tls_0_1_3 ]
      ++ (if features.irc_0_12_5.serde_json or false then [ serde_json_1_0_7 ] else [])
      ++ (if features.irc_0_12_5.toml or false then [ toml_0_4_5 ] else []));
    features = mkFeatures (features.irc_0_12_5 or {});
  };
  irc_0_12_5_features = f: updateFeatures f (rec {
    bufstream_0_1_3.default = true;
    bytes_0_4_5.default = true;
    chrono_0_4_0.default = true;
    encoding_0_2_33.default = true;
    error_chain_0_10_0.default = true;
    futures_0_1_17.default = true;
    irc_0_12_5.ctcp =
      (f.irc_0_12_5.ctcp or false) ||
      (f.irc_0_12_5.default or false) ||
      (irc_0_12_5.default or false);
    irc_0_12_5.default = (f.irc_0_12_5.default or true);
    irc_0_12_5.json =
      (f.irc_0_12_5.json or false) ||
      (f.irc_0_12_5.default or false) ||
      (irc_0_12_5.default or false);
    irc_0_12_5.serde_json =
      (f.irc_0_12_5.serde_json or false) ||
      (f.irc_0_12_5.json or false) ||
      (irc_0_12_5.json or false);
    irc_0_12_5.serde_yaml =
      (f.irc_0_12_5.serde_yaml or false) ||
      (f.irc_0_12_5.yaml or false) ||
      (irc_0_12_5.yaml or false);
    irc_0_12_5.toml =
      (f.irc_0_12_5.toml or false) ||
      (f.irc_0_12_5.default or false) ||
      (irc_0_12_5.default or false);
    native_tls_0_1_4.default = true;
    serde_1_0_23.default = true;
    serde_derive_1_0_23.default = true;
    serde_json_1_0_7.default = true;
    tokio_core_0_1_10.default = true;
    tokio_io_0_1_4.default = true;
    tokio_mockstream_1_1_0.default = true;
    tokio_timer_0_1_2.default = true;
    tokio_tls_0_1_3.default = true;
    toml_0_4_5.default = true;
  }) [ bufstream_0_1_3_features bytes_0_4_5_features chrono_0_4_0_features encoding_0_2_33_features error_chain_0_10_0_features futures_0_1_17_features native_tls_0_1_4_features serde_1_0_23_features serde_derive_1_0_23_features serde_json_1_0_7_features tokio_core_0_1_10_features tokio_io_0_1_4_features tokio_mockstream_1_1_0_features tokio_timer_0_1_2_features tokio_tls_0_1_3_features toml_0_4_5_features ];
  ircbot_0_1_0 = { features?(ircbot_0_1_0_features {}) }: ircbot_0_1_0_ {
    dependencies = mapFeatures features ([ amqp_0_1_0 env_logger_0_4_3 irc_0_12_5 log_0_3_8 rand_0_3_18 serde_1_0_23 serde_derive_1_0_23 serde_json_1_0_7 toml_0_4_5 ]);
  };
  ircbot_0_1_0_features = f: updateFeatures f (rec {
    amqp_0_1_0.default = true;
    env_logger_0_4_3.default = true;
    irc_0_12_5.default = true;
    ircbot_0_1_0.default = (f.ircbot_0_1_0.default or true);
    log_0_3_8.default = true;
    rand_0_3_18.default = true;
    serde_1_0_23.default = true;
    serde_derive_1_0_23.default = true;
    serde_json_1_0_7.default = true;
    toml_0_4_5.default = true;
  }) [ amqp_0_1_0_features env_logger_0_4_3_features irc_0_12_5_features log_0_3_8_features rand_0_3_18_features serde_1_0_23_features serde_derive_1_0_23_features serde_json_1_0_7_features toml_0_4_5_features ];
  itoa_0_3_4 = { features?(itoa_0_3_4_features {}) }: itoa_0_3_4_ {
    features = mkFeatures (features.itoa_0_3_4 or {});
  };
  itoa_0_3_4_features = f: updateFeatures f (rec {
    itoa_0_3_4.default = (f.itoa_0_3_4.default or true);
  }) [];
  kernel32_sys_0_2_2 = { features?(kernel32_sys_0_2_2_features {}) }: kernel32_sys_0_2_2_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  kernel32_sys_0_2_2_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = (f.kernel32_sys_0_2_2.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  lazy_static_0_2_11 = { features?(lazy_static_0_2_11_features {}) }: lazy_static_0_2_11_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static_0_2_11 or {});
  };
  lazy_static_0_2_11_features = f: updateFeatures f (rec {
    lazy_static_0_2_11.compiletest_rs =
      (f.lazy_static_0_2_11.compiletest_rs or false) ||
      (f.lazy_static_0_2_11.compiletest or false) ||
      (lazy_static_0_2_11.compiletest or false);
    lazy_static_0_2_11.default = (f.lazy_static_0_2_11.default or true);
    lazy_static_0_2_11.nightly =
      (f.lazy_static_0_2_11.nightly or false) ||
      (f.lazy_static_0_2_11.spin_no_std or false) ||
      (lazy_static_0_2_11.spin_no_std or false);
    lazy_static_0_2_11.spin =
      (f.lazy_static_0_2_11.spin or false) ||
      (f.lazy_static_0_2_11.spin_no_std or false) ||
      (lazy_static_0_2_11.spin_no_std or false);
  }) [];
  lazy_static_1_0_0 = { features?(lazy_static_1_0_0_features {}) }: lazy_static_1_0_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static_1_0_0 or {});
  };
  lazy_static_1_0_0_features = f: updateFeatures f (rec {
    lazy_static_1_0_0.compiletest_rs =
      (f.lazy_static_1_0_0.compiletest_rs or false) ||
      (f.lazy_static_1_0_0.compiletest or false) ||
      (lazy_static_1_0_0.compiletest or false);
    lazy_static_1_0_0.default = (f.lazy_static_1_0_0.default or true);
    lazy_static_1_0_0.nightly =
      (f.lazy_static_1_0_0.nightly or false) ||
      (f.lazy_static_1_0_0.spin_no_std or false) ||
      (lazy_static_1_0_0.spin_no_std or false);
    lazy_static_1_0_0.spin =
      (f.lazy_static_1_0_0.spin or false) ||
      (f.lazy_static_1_0_0.spin_no_std or false) ||
      (lazy_static_1_0_0.spin_no_std or false);
  }) [];
  lazycell_0_5_1 = { features?(lazycell_0_5_1_features {}) }: lazycell_0_5_1_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazycell_0_5_1 or {});
  };
  lazycell_0_5_1_features = f: updateFeatures f (rec {
    lazycell_0_5_1.clippy =
      (f.lazycell_0_5_1.clippy or false) ||
      (f.lazycell_0_5_1.nightly-testing or false) ||
      (lazycell_0_5_1.nightly-testing or false);
    lazycell_0_5_1.default = (f.lazycell_0_5_1.default or true);
    lazycell_0_5_1.nightly =
      (f.lazycell_0_5_1.nightly or false) ||
      (f.lazycell_0_5_1.nightly-testing or false) ||
      (lazycell_0_5_1.nightly-testing or false);
  }) [];
  libc_0_2_34 = { features?(libc_0_2_34_features {}) }: libc_0_2_34_ {
    features = mkFeatures (features.libc_0_2_34 or {});
  };
  libc_0_2_34_features = f: updateFeatures f (rec {
    libc_0_2_34.default = (f.libc_0_2_34.default or true);
    libc_0_2_34.use_std =
      (f.libc_0_2_34.use_std or false) ||
      (f.libc_0_2_34.default or false) ||
      (libc_0_2_34.default or false);
  }) [];
  log_0_3_8 = { features?(log_0_3_8_features {}) }: log_0_3_8_ {
    features = mkFeatures (features.log_0_3_8 or {});
  };
  log_0_3_8_features = f: updateFeatures f (rec {
    log_0_3_8.default = (f.log_0_3_8.default or true);
    log_0_3_8.use_std =
      (f.log_0_3_8.use_std or false) ||
      (f.log_0_3_8.default or false) ||
      (log_0_3_8.default or false);
  }) [];
  matches_0_1_6 = { features?(matches_0_1_6_features {}) }: matches_0_1_6_ {};
  matches_0_1_6_features = f: updateFeatures f (rec {
    matches_0_1_6.default = (f.matches_0_1_6.default or true);
  }) [];
  memchr_0_1_11 = { features?(memchr_0_1_11_features {}) }: memchr_0_1_11_ {
    dependencies = mapFeatures features ([ libc_0_2_34 ]);
  };
  memchr_0_1_11_features = f: updateFeatures f (rec {
    libc_0_2_34.default = true;
    memchr_0_1_11.default = (f.memchr_0_1_11.default or true);
  }) [ libc_0_2_34_features ];
  memchr_2_0_1 = { features?(memchr_2_0_1_features {}) }: memchr_2_0_1_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.memchr_2_0_1.libc or false then [ libc_0_2_34 ] else []));
    features = mkFeatures (features.memchr_2_0_1 or {});
  };
  memchr_2_0_1_features = f: updateFeatures f (rec {
    libc_0_2_34.default = (f.libc_0_2_34.default or false);
    libc_0_2_34.use_std =
      (f.libc_0_2_34.use_std or false) ||
      (memchr_2_0_1.use_std or false) ||
      (f.memchr_2_0_1.use_std or false);
    memchr_2_0_1.default = (f.memchr_2_0_1.default or true);
    memchr_2_0_1.libc =
      (f.memchr_2_0_1.libc or false) ||
      (f.memchr_2_0_1.default or false) ||
      (memchr_2_0_1.default or false) ||
      (f.memchr_2_0_1.use_std or false) ||
      (memchr_2_0_1.use_std or false);
    memchr_2_0_1.use_std =
      (f.memchr_2_0_1.use_std or false) ||
      (f.memchr_2_0_1.default or false) ||
      (memchr_2_0_1.default or false);
  }) [ libc_0_2_34_features ];
  mio_0_6_11 = { features?(mio_0_6_11_features {}) }: mio_0_6_11_ {
    dependencies = mapFeatures features ([ iovec_0_1_1 lazycell_0_5_1 log_0_3_8 net2_0_2_31 slab_0_3_0 ])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_2_1 fuchsia_zircon_sys_0_2_0 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_34 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ kernel32_sys_0_2_2 miow_0_2_1 winapi_0_2_8 ]) else []);
    features = mkFeatures (features.mio_0_6_11 or {});
  };
  mio_0_6_11_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_2_1.default = true;
    fuchsia_zircon_sys_0_2_0.default = true;
    iovec_0_1_1.default = true;
    kernel32_sys_0_2_2.default = true;
    lazycell_0_5_1.default = true;
    libc_0_2_34.default = true;
    log_0_3_8.default = true;
    mio_0_6_11.default = (f.mio_0_6_11.default or true);
    mio_0_6_11.with-deprecated =
      (f.mio_0_6_11.with-deprecated or false) ||
      (f.mio_0_6_11.default or false) ||
      (mio_0_6_11.default or false);
    miow_0_2_1.default = true;
    net2_0_2_31.default = true;
    slab_0_3_0.default = true;
    winapi_0_2_8.default = true;
  }) [ iovec_0_1_1_features lazycell_0_5_1_features log_0_3_8_features net2_0_2_31_features slab_0_3_0_features fuchsia_zircon_0_2_1_features fuchsia_zircon_sys_0_2_0_features libc_0_2_34_features kernel32_sys_0_2_2_features miow_0_2_1_features winapi_0_2_8_features ];
  miow_0_2_1 = { features?(miow_0_2_1_features {}) }: miow_0_2_1_ {
    dependencies = mapFeatures features ([ kernel32_sys_0_2_2 net2_0_2_31 winapi_0_2_8 ws2_32_sys_0_2_1 ]);
  };
  miow_0_2_1_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = true;
    miow_0_2_1.default = (f.miow_0_2_1.default or true);
    net2_0_2_31.default = (f.net2_0_2_31.default or false);
    winapi_0_2_8.default = true;
    ws2_32_sys_0_2_1.default = true;
  }) [ kernel32_sys_0_2_2_features net2_0_2_31_features winapi_0_2_8_features ws2_32_sys_0_2_1_features ];
  native_tls_0_1_4 = { features?(native_tls_0_1_4_features {}) }: native_tls_0_1_4_ {
    dependencies = (if !(kernel == "windows" || kernel == "darwin") then mapFeatures features ([ openssl_0_9_22 ]) else [])
      ++ (if kernel == "darwin" then mapFeatures features ([ security_framework_0_1_16 security_framework_sys_0_1_16 tempdir_0_3_5 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ schannel_0_1_9 ]) else []);
  };
  native_tls_0_1_4_features = f: updateFeatures f (rec {
    native_tls_0_1_4.default = (f.native_tls_0_1_4.default or true);
    openssl_0_9_22.default = true;
    schannel_0_1_9.default = true;
    security_framework_0_1_16.OSX_10_8 = true;
    security_framework_0_1_16.default = true;
    security_framework_sys_0_1_16.default = true;
    tempdir_0_3_5.default = true;
  }) [ openssl_0_9_22_features security_framework_0_1_16_features security_framework_sys_0_1_16_features tempdir_0_3_5_features schannel_0_1_9_features ];
  net2_0_2_31 = { features?(net2_0_2_31_features {}) }: net2_0_2_31_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_2 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_34 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ kernel32_sys_0_2_2 winapi_0_2_8 ws2_32_sys_0_2_1 ]) else [])
      ++ (if kernel == "i686-apple-darwin" then mapFeatures features ([ libc_0_2_34 ]) else [])
      ++ (if kernel == "i686-unknown-linux-gnu" then mapFeatures features ([ libc_0_2_34 ]) else [])
      ++ (if kernel == "x86_64-apple-darwin" then mapFeatures features ([ libc_0_2_34 ]) else [])
      ++ (if kernel == "x86_64-unknown-linux-gnu" then mapFeatures features ([ libc_0_2_34 ]) else []);
    features = mkFeatures (features.net2_0_2_31 or {});
  };
  net2_0_2_31_features = f: updateFeatures f (rec {
    cfg_if_0_1_2.default = true;
    kernel32_sys_0_2_2.default = true;
    libc_0_2_34.default = true;
    net2_0_2_31.default = (f.net2_0_2_31.default or true);
    net2_0_2_31.duration =
      (f.net2_0_2_31.duration or false) ||
      (f.net2_0_2_31.default or false) ||
      (net2_0_2_31.default or false);
    winapi_0_2_8.default = true;
    ws2_32_sys_0_2_1.default = true;
  }) [ cfg_if_0_1_2_features libc_0_2_34_features kernel32_sys_0_2_2_features winapi_0_2_8_features ws2_32_sys_0_2_1_features libc_0_2_34_features libc_0_2_34_features libc_0_2_34_features libc_0_2_34_features ];
  num_0_1_41 = { features?(num_0_1_41_features {}) }: num_0_1_41_ {
    dependencies = mapFeatures features ([ num_integer_0_1_35 num_iter_0_1_34 num_traits_0_1_41 ]);
    features = mkFeatures (features.num_0_1_41 or {});
  };
  num_0_1_41_features = f: updateFeatures f (rec {
    num_0_1_41.bigint =
      (f.num_0_1_41.bigint or false) ||
      (f.num_0_1_41.default or false) ||
      (num_0_1_41.default or false);
    num_0_1_41.complex =
      (f.num_0_1_41.complex or false) ||
      (f.num_0_1_41.default or false) ||
      (num_0_1_41.default or false);
    num_0_1_41.default = (f.num_0_1_41.default or true);
    num_0_1_41.num-bigint =
      (f.num_0_1_41.num-bigint or false) ||
      (f.num_0_1_41.bigint or false) ||
      (num_0_1_41.bigint or false);
    num_0_1_41.num-complex =
      (f.num_0_1_41.num-complex or false) ||
      (f.num_0_1_41.complex or false) ||
      (num_0_1_41.complex or false);
    num_0_1_41.num-rational =
      (f.num_0_1_41.num-rational or false) ||
      (f.num_0_1_41.rational or false) ||
      (num_0_1_41.rational or false);
    num_0_1_41.rational =
      (f.num_0_1_41.rational or false) ||
      (f.num_0_1_41.default or false) ||
      (num_0_1_41.default or false);
    num_0_1_41.rustc-serialize =
      (f.num_0_1_41.rustc-serialize or false) ||
      (f.num_0_1_41.default or false) ||
      (num_0_1_41.default or false);
    num_integer_0_1_35.default = true;
    num_iter_0_1_34.default = true;
    num_traits_0_1_41.default = true;
  }) [ num_integer_0_1_35_features num_iter_0_1_34_features num_traits_0_1_41_features ];
  num_integer_0_1_35 = { features?(num_integer_0_1_35_features {}) }: num_integer_0_1_35_ {
    dependencies = mapFeatures features ([ num_traits_0_1_41 ]);
  };
  num_integer_0_1_35_features = f: updateFeatures f (rec {
    num_integer_0_1_35.default = (f.num_integer_0_1_35.default or true);
    num_traits_0_1_41.default = true;
  }) [ num_traits_0_1_41_features ];
  num_iter_0_1_34 = { features?(num_iter_0_1_34_features {}) }: num_iter_0_1_34_ {
    dependencies = mapFeatures features ([ num_integer_0_1_35 num_traits_0_1_41 ]);
  };
  num_iter_0_1_34_features = f: updateFeatures f (rec {
    num_integer_0_1_35.default = true;
    num_iter_0_1_34.default = (f.num_iter_0_1_34.default or true);
    num_traits_0_1_41.default = true;
  }) [ num_integer_0_1_35_features num_traits_0_1_41_features ];
  num_traits_0_1_41 = { features?(num_traits_0_1_41_features {}) }: num_traits_0_1_41_ {};
  num_traits_0_1_41_features = f: updateFeatures f (rec {
    num_traits_0_1_41.default = (f.num_traits_0_1_41.default or true);
  }) [];
  openssl_0_9_22 = { features?(openssl_0_9_22_features {}) }: openssl_0_9_22_ {
    dependencies = mapFeatures features ([ bitflags_0_9_1 foreign_types_0_3_2 lazy_static_0_2_11 libc_0_2_34 openssl_sys_0_9_22 ]);
    features = mkFeatures (features.openssl_0_9_22 or {});
  };
  openssl_0_9_22_features = f: updateFeatures f (rec {
    bitflags_0_9_1.default = true;
    foreign_types_0_3_2.default = true;
    lazy_static_0_2_11.default = true;
    libc_0_2_34.default = true;
    openssl_0_9_22.default = (f.openssl_0_9_22.default or true);
    openssl_sys_0_9_22.default = true;
  }) [ bitflags_0_9_1_features foreign_types_0_3_2_features lazy_static_0_2_11_features libc_0_2_34_features openssl_sys_0_9_22_features ];
  openssl_sys_0_9_22 = { features?(openssl_sys_0_9_22_features {}) }: openssl_sys_0_9_22_ {
    dependencies = mapFeatures features ([ libc_0_2_34 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_3 pkg_config_0_3_9 ]);
  };
  openssl_sys_0_9_22_features = f: updateFeatures f (rec {
    cc_1_0_3.default = true;
    libc_0_2_34.default = true;
    openssl_sys_0_9_22.default = (f.openssl_sys_0_9_22.default or true);
    pkg_config_0_3_9.default = true;
  }) [ libc_0_2_34_features cc_1_0_3_features pkg_config_0_3_9_features ];
  percent_encoding_1_0_1 = { features?(percent_encoding_1_0_1_features {}) }: percent_encoding_1_0_1_ {};
  percent_encoding_1_0_1_features = f: updateFeatures f (rec {
    percent_encoding_1_0_1.default = (f.percent_encoding_1_0_1.default or true);
  }) [];
  pkg_config_0_3_9 = { features?(pkg_config_0_3_9_features {}) }: pkg_config_0_3_9_ {};
  pkg_config_0_3_9_features = f: updateFeatures f (rec {
    pkg_config_0_3_9.default = (f.pkg_config_0_3_9.default or true);
  }) [];
  quote_0_3_15 = { features?(quote_0_3_15_features {}) }: quote_0_3_15_ {};
  quote_0_3_15_features = f: updateFeatures f (rec {
    quote_0_3_15.default = (f.quote_0_3_15.default or true);
  }) [];
  rand_0_3_18 = { features?(rand_0_3_18_features {}) }: rand_0_3_18_ {
    dependencies = mapFeatures features ([ libc_0_2_34 ])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_2_1 ]) else []);
    features = mkFeatures (features.rand_0_3_18 or {});
  };
  rand_0_3_18_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_2_1.default = true;
    libc_0_2_34.default = true;
    rand_0_3_18.default = (f.rand_0_3_18.default or true);
    rand_0_3_18.i128_support =
      (f.rand_0_3_18.i128_support or false) ||
      (f.rand_0_3_18.nightly or false) ||
      (rand_0_3_18.nightly or false);
  }) [ libc_0_2_34_features fuchsia_zircon_0_2_1_features ];
  redox_syscall_0_1_32 = { features?(redox_syscall_0_1_32_features {}) }: redox_syscall_0_1_32_ {};
  redox_syscall_0_1_32_features = f: updateFeatures f (rec {
    redox_syscall_0_1_32.default = (f.redox_syscall_0_1_32.default or true);
  }) [];
  regex_0_1_80 = { features?(regex_0_1_80_features {}) }: regex_0_1_80_ {
    dependencies = mapFeatures features ([ aho_corasick_0_5_3 memchr_0_1_11 regex_syntax_0_3_9 thread_local_0_2_7 utf8_ranges_0_1_3 ]);
    features = mkFeatures (features.regex_0_1_80 or {});
  };
  regex_0_1_80_features = f: updateFeatures f (rec {
    aho_corasick_0_5_3.default = true;
    memchr_0_1_11.default = true;
    regex_0_1_80.default = (f.regex_0_1_80.default or true);
    regex_0_1_80.simd =
      (f.regex_0_1_80.simd or false) ||
      (f.regex_0_1_80.simd-accel or false) ||
      (regex_0_1_80.simd-accel or false);
    regex_syntax_0_3_9.default = true;
    thread_local_0_2_7.default = true;
    utf8_ranges_0_1_3.default = true;
  }) [ aho_corasick_0_5_3_features memchr_0_1_11_features regex_syntax_0_3_9_features thread_local_0_2_7_features utf8_ranges_0_1_3_features ];
  regex_0_2_3 = { features?(regex_0_2_3_features {}) }: regex_0_2_3_ {
    dependencies = mapFeatures features ([ aho_corasick_0_6_4 memchr_2_0_1 regex_syntax_0_4_1 thread_local_0_3_4 utf8_ranges_1_0_0 ]);
    features = mkFeatures (features.regex_0_2_3 or {});
  };
  regex_0_2_3_features = f: updateFeatures f (rec {
    aho_corasick_0_6_4.default = true;
    memchr_2_0_1.default = true;
    regex_0_2_3.default = (f.regex_0_2_3.default or true);
    regex_0_2_3.simd =
      (f.regex_0_2_3.simd or false) ||
      (f.regex_0_2_3.simd-accel or false) ||
      (regex_0_2_3.simd-accel or false);
    regex_syntax_0_4_1.default = true;
    thread_local_0_3_4.default = true;
    utf8_ranges_1_0_0.default = true;
  }) [ aho_corasick_0_6_4_features memchr_2_0_1_features regex_syntax_0_4_1_features thread_local_0_3_4_features utf8_ranges_1_0_0_features ];
  regex_syntax_0_3_9 = { features?(regex_syntax_0_3_9_features {}) }: regex_syntax_0_3_9_ {};
  regex_syntax_0_3_9_features = f: updateFeatures f (rec {
    regex_syntax_0_3_9.default = (f.regex_syntax_0_3_9.default or true);
  }) [];
  regex_syntax_0_4_1 = { features?(regex_syntax_0_4_1_features {}) }: regex_syntax_0_4_1_ {};
  regex_syntax_0_4_1_features = f: updateFeatures f (rec {
    regex_syntax_0_4_1.default = (f.regex_syntax_0_4_1.default or true);
  }) [];
  rustc_demangle_0_1_5 = { features?(rustc_demangle_0_1_5_features {}) }: rustc_demangle_0_1_5_ {};
  rustc_demangle_0_1_5_features = f: updateFeatures f (rec {
    rustc_demangle_0_1_5.default = (f.rustc_demangle_0_1_5.default or true);
  }) [];
  schannel_0_1_9 = { features?(schannel_0_1_9_features {}) }: schannel_0_1_9_ {
    dependencies = mapFeatures features ([ advapi32_sys_0_2_0 crypt32_sys_0_2_0 kernel32_sys_0_2_2 lazy_static_1_0_0 secur32_sys_0_2_0 winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  schannel_0_1_9_features = f: updateFeatures f (rec {
    advapi32_sys_0_2_0.default = true;
    crypt32_sys_0_2_0.default = true;
    kernel32_sys_0_2_2.default = true;
    lazy_static_1_0_0.default = true;
    schannel_0_1_9.default = (f.schannel_0_1_9.default or true);
    secur32_sys_0_2_0.default = true;
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ advapi32_sys_0_2_0_features crypt32_sys_0_2_0_features kernel32_sys_0_2_2_features lazy_static_1_0_0_features secur32_sys_0_2_0_features winapi_0_2_8_features winapi_build_0_1_1_features ];
  scoped_tls_0_1_0 = { features?(scoped_tls_0_1_0_features {}) }: scoped_tls_0_1_0_ {};
  scoped_tls_0_1_0_features = f: updateFeatures f (rec {
    scoped_tls_0_1_0.default = (f.scoped_tls_0_1_0.default or true);
  }) [];
  secur32_sys_0_2_0 = { features?(secur32_sys_0_2_0_features {}) }: secur32_sys_0_2_0_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  secur32_sys_0_2_0_features = f: updateFeatures f (rec {
    secur32_sys_0_2_0.default = (f.secur32_sys_0_2_0.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  security_framework_0_1_16 = { features?(security_framework_0_1_16_features {}) }: security_framework_0_1_16_ {
    dependencies = mapFeatures features ([ core_foundation_0_2_3 core_foundation_sys_0_2_3 libc_0_2_34 security_framework_sys_0_1_16 ]);
    features = mkFeatures (features.security_framework_0_1_16 or {});
  };
  security_framework_0_1_16_features = f: updateFeatures f (rec {
    core_foundation_0_2_3.default = true;
    core_foundation_sys_0_2_3.default = true;
    libc_0_2_34.default = true;
    security_framework_0_1_16.OSX_10_10 =
      (f.security_framework_0_1_16.OSX_10_10 or false) ||
      (f.security_framework_0_1_16.OSX_10_11 or false) ||
      (security_framework_0_1_16.OSX_10_11 or false);
    security_framework_0_1_16.OSX_10_11 =
      (f.security_framework_0_1_16.OSX_10_11 or false) ||
      (f.security_framework_0_1_16.OSX_10_12 or false) ||
      (security_framework_0_1_16.OSX_10_12 or false);
    security_framework_0_1_16.OSX_10_8 =
      (f.security_framework_0_1_16.OSX_10_8 or false) ||
      (f.security_framework_0_1_16.OSX_10_9 or false) ||
      (security_framework_0_1_16.OSX_10_9 or false);
    security_framework_0_1_16.OSX_10_9 =
      (f.security_framework_0_1_16.OSX_10_9 or false) ||
      (f.security_framework_0_1_16.OSX_10_10 or false) ||
      (security_framework_0_1_16.OSX_10_10 or false);
    security_framework_0_1_16.default = (f.security_framework_0_1_16.default or true);
    security_framework_sys_0_1_16.OSX_10_10 =
      (f.security_framework_sys_0_1_16.OSX_10_10 or false) ||
      (security_framework_0_1_16.OSX_10_10 or false) ||
      (f.security_framework_0_1_16.OSX_10_10 or false);
    security_framework_sys_0_1_16.OSX_10_11 =
      (f.security_framework_sys_0_1_16.OSX_10_11 or false) ||
      (security_framework_0_1_16.OSX_10_11 or false) ||
      (f.security_framework_0_1_16.OSX_10_11 or false) ||
      (security_framework_0_1_16.OSX_10_12 or false) ||
      (f.security_framework_0_1_16.OSX_10_12 or false);
    security_framework_sys_0_1_16.OSX_10_8 =
      (f.security_framework_sys_0_1_16.OSX_10_8 or false) ||
      (security_framework_0_1_16.OSX_10_8 or false) ||
      (f.security_framework_0_1_16.OSX_10_8 or false);
    security_framework_sys_0_1_16.OSX_10_9 =
      (f.security_framework_sys_0_1_16.OSX_10_9 or false) ||
      (security_framework_0_1_16.OSX_10_9 or false) ||
      (f.security_framework_0_1_16.OSX_10_9 or false);
    security_framework_sys_0_1_16.default = true;
  }) [ core_foundation_0_2_3_features core_foundation_sys_0_2_3_features libc_0_2_34_features security_framework_sys_0_1_16_features ];
  security_framework_sys_0_1_16 = { features?(security_framework_sys_0_1_16_features {}) }: security_framework_sys_0_1_16_ {
    dependencies = mapFeatures features ([ core_foundation_sys_0_2_3 libc_0_2_34 ]);
    features = mkFeatures (features.security_framework_sys_0_1_16 or {});
  };
  security_framework_sys_0_1_16_features = f: updateFeatures f (rec {
    core_foundation_sys_0_2_3.default = true;
    libc_0_2_34.default = true;
    security_framework_sys_0_1_16.OSX_10_10 =
      (f.security_framework_sys_0_1_16.OSX_10_10 or false) ||
      (f.security_framework_sys_0_1_16.OSX_10_11 or false) ||
      (security_framework_sys_0_1_16.OSX_10_11 or false);
    security_framework_sys_0_1_16.OSX_10_11 =
      (f.security_framework_sys_0_1_16.OSX_10_11 or false) ||
      (f.security_framework_sys_0_1_16.OSX_10_12 or false) ||
      (security_framework_sys_0_1_16.OSX_10_12 or false);
    security_framework_sys_0_1_16.OSX_10_8 =
      (f.security_framework_sys_0_1_16.OSX_10_8 or false) ||
      (f.security_framework_sys_0_1_16.OSX_10_9 or false) ||
      (security_framework_sys_0_1_16.OSX_10_9 or false);
    security_framework_sys_0_1_16.OSX_10_9 =
      (f.security_framework_sys_0_1_16.OSX_10_9 or false) ||
      (f.security_framework_sys_0_1_16.OSX_10_10 or false) ||
      (security_framework_sys_0_1_16.OSX_10_10 or false);
    security_framework_sys_0_1_16.default = (f.security_framework_sys_0_1_16.default or true);
  }) [ core_foundation_sys_0_2_3_features libc_0_2_34_features ];
  serde_1_0_23 = { features?(serde_1_0_23_features {}) }: serde_1_0_23_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.serde_1_0_23 or {});
  };
  serde_1_0_23_features = f: updateFeatures f (rec {
    serde_1_0_23.default = (f.serde_1_0_23.default or true);
    serde_1_0_23.serde_derive =
      (f.serde_1_0_23.serde_derive or false) ||
      (f.serde_1_0_23.derive or false) ||
      (serde_1_0_23.derive or false) ||
      (f.serde_1_0_23.playground or false) ||
      (serde_1_0_23.playground or false);
    serde_1_0_23.std =
      (f.serde_1_0_23.std or false) ||
      (f.serde_1_0_23.default or false) ||
      (serde_1_0_23.default or false);
    serde_1_0_23.unstable =
      (f.serde_1_0_23.unstable or false) ||
      (f.serde_1_0_23.alloc or false) ||
      (serde_1_0_23.alloc or false);
  }) [];
  serde_derive_1_0_23 = { features?(serde_derive_1_0_23_features {}) }: serde_derive_1_0_23_ {
    dependencies = mapFeatures features ([ quote_0_3_15 serde_derive_internals_0_17_0 syn_0_11_11 ]);
  };
  serde_derive_1_0_23_features = f: updateFeatures f (rec {
    quote_0_3_15.default = true;
    serde_derive_1_0_23.default = (f.serde_derive_1_0_23.default or true);
    serde_derive_internals_0_17_0.default = (f.serde_derive_internals_0_17_0.default or false);
    syn_0_11_11.default = true;
    syn_0_11_11.visit = true;
  }) [ quote_0_3_15_features serde_derive_internals_0_17_0_features syn_0_11_11_features ];
  serde_derive_internals_0_17_0 = { features?(serde_derive_internals_0_17_0_features {}) }: serde_derive_internals_0_17_0_ {
    dependencies = mapFeatures features ([ syn_0_11_11 synom_0_11_3 ]);
  };
  serde_derive_internals_0_17_0_features = f: updateFeatures f (rec {
    serde_derive_internals_0_17_0.default = (f.serde_derive_internals_0_17_0.default or true);
    syn_0_11_11.default = (f.syn_0_11_11.default or false);
    syn_0_11_11.parsing = true;
    synom_0_11_3.default = true;
  }) [ syn_0_11_11_features synom_0_11_3_features ];
  serde_json_1_0_7 = { features?(serde_json_1_0_7_features {}) }: serde_json_1_0_7_ {
    dependencies = mapFeatures features ([ dtoa_0_4_2 itoa_0_3_4 num_traits_0_1_41 serde_1_0_23 ]);
    features = mkFeatures (features.serde_json_1_0_7 or {});
  };
  serde_json_1_0_7_features = f: updateFeatures f (rec {
    dtoa_0_4_2.default = true;
    itoa_0_3_4.default = true;
    num_traits_0_1_41.default = true;
    serde_1_0_23.default = true;
    serde_json_1_0_7.default = (f.serde_json_1_0_7.default or true);
    serde_json_1_0_7.linked-hash-map =
      (f.serde_json_1_0_7.linked-hash-map or false) ||
      (f.serde_json_1_0_7.preserve_order or false) ||
      (serde_json_1_0_7.preserve_order or false);
  }) [ dtoa_0_4_2_features itoa_0_3_4_features num_traits_0_1_41_features serde_1_0_23_features ];
  slab_0_3_0 = { features?(slab_0_3_0_features {}) }: slab_0_3_0_ {};
  slab_0_3_0_features = f: updateFeatures f (rec {
    slab_0_3_0.default = (f.slab_0_3_0.default or true);
  }) [];
  slab_0_4_0 = { features?(slab_0_4_0_features {}) }: slab_0_4_0_ {};
  slab_0_4_0_features = f: updateFeatures f (rec {
    slab_0_4_0.default = (f.slab_0_4_0.default or true);
  }) [];
  syn_0_11_11 = { features?(syn_0_11_11_features {}) }: syn_0_11_11_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.syn_0_11_11.quote or false then [ quote_0_3_15 ] else [])
      ++ (if features.syn_0_11_11.synom or false then [ synom_0_11_3 ] else [])
      ++ (if features.syn_0_11_11.unicode-xid or false then [ unicode_xid_0_0_4 ] else []));
    features = mkFeatures (features.syn_0_11_11 or {});
  };
  syn_0_11_11_features = f: updateFeatures f (rec {
    quote_0_3_15.default = true;
    syn_0_11_11.default = (f.syn_0_11_11.default or true);
    syn_0_11_11.parsing =
      (f.syn_0_11_11.parsing or false) ||
      (f.syn_0_11_11.default or false) ||
      (syn_0_11_11.default or false);
    syn_0_11_11.printing =
      (f.syn_0_11_11.printing or false) ||
      (f.syn_0_11_11.default or false) ||
      (syn_0_11_11.default or false);
    syn_0_11_11.quote =
      (f.syn_0_11_11.quote or false) ||
      (f.syn_0_11_11.printing or false) ||
      (syn_0_11_11.printing or false);
    syn_0_11_11.synom =
      (f.syn_0_11_11.synom or false) ||
      (f.syn_0_11_11.parsing or false) ||
      (syn_0_11_11.parsing or false);
    syn_0_11_11.unicode-xid =
      (f.syn_0_11_11.unicode-xid or false) ||
      (f.syn_0_11_11.parsing or false) ||
      (syn_0_11_11.parsing or false);
    synom_0_11_3.default = true;
    unicode_xid_0_0_4.default = true;
  }) [ quote_0_3_15_features synom_0_11_3_features unicode_xid_0_0_4_features ];
  synom_0_11_3 = { features?(synom_0_11_3_features {}) }: synom_0_11_3_ {
    dependencies = mapFeatures features ([ unicode_xid_0_0_4 ]);
  };
  synom_0_11_3_features = f: updateFeatures f (rec {
    synom_0_11_3.default = (f.synom_0_11_3.default or true);
    unicode_xid_0_0_4.default = true;
  }) [ unicode_xid_0_0_4_features ];
  tempdir_0_3_5 = { features?(tempdir_0_3_5_features {}) }: tempdir_0_3_5_ {
    dependencies = mapFeatures features ([ rand_0_3_18 ]);
  };
  tempdir_0_3_5_features = f: updateFeatures f (rec {
    rand_0_3_18.default = true;
    tempdir_0_3_5.default = (f.tempdir_0_3_5.default or true);
  }) [ rand_0_3_18_features ];
  thread_id_2_0_0 = { features?(thread_id_2_0_0_features {}) }: thread_id_2_0_0_ {
    dependencies = mapFeatures features ([ kernel32_sys_0_2_2 libc_0_2_34 ]);
  };
  thread_id_2_0_0_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = true;
    libc_0_2_34.default = true;
    thread_id_2_0_0.default = (f.thread_id_2_0_0.default or true);
  }) [ kernel32_sys_0_2_2_features libc_0_2_34_features ];
  thread_local_0_2_7 = { features?(thread_local_0_2_7_features {}) }: thread_local_0_2_7_ {
    dependencies = mapFeatures features ([ thread_id_2_0_0 ]);
  };
  thread_local_0_2_7_features = f: updateFeatures f (rec {
    thread_id_2_0_0.default = true;
    thread_local_0_2_7.default = (f.thread_local_0_2_7.default or true);
  }) [ thread_id_2_0_0_features ];
  thread_local_0_3_4 = { features?(thread_local_0_3_4_features {}) }: thread_local_0_3_4_ {
    dependencies = mapFeatures features ([ lazy_static_0_2_11 unreachable_1_0_0 ]);
  };
  thread_local_0_3_4_features = f: updateFeatures f (rec {
    lazy_static_0_2_11.default = true;
    thread_local_0_3_4.default = (f.thread_local_0_3_4.default or true);
    unreachable_1_0_0.default = true;
  }) [ lazy_static_0_2_11_features unreachable_1_0_0_features ];
  time_0_1_38 = { features?(time_0_1_38_features {}) }: time_0_1_38_ {
    dependencies = mapFeatures features ([ libc_0_2_34 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_32 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ kernel32_sys_0_2_2 winapi_0_2_8 ]) else []);
  };
  time_0_1_38_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = true;
    libc_0_2_34.default = true;
    redox_syscall_0_1_32.default = true;
    time_0_1_38.default = (f.time_0_1_38.default or true);
    winapi_0_2_8.default = true;
  }) [ libc_0_2_34_features redox_syscall_0_1_32_features kernel32_sys_0_2_2_features winapi_0_2_8_features ];
  tokio_core_0_1_10 = { features?(tokio_core_0_1_10_features {}) }: tokio_core_0_1_10_ {
    dependencies = mapFeatures features ([ bytes_0_4_5 futures_0_1_17 iovec_0_1_1 log_0_3_8 mio_0_6_11 scoped_tls_0_1_0 slab_0_4_0 tokio_io_0_1_4 ]);
  };
  tokio_core_0_1_10_features = f: updateFeatures f (rec {
    bytes_0_4_5.default = true;
    futures_0_1_17.default = true;
    iovec_0_1_1.default = true;
    log_0_3_8.default = true;
    mio_0_6_11.default = true;
    scoped_tls_0_1_0.default = true;
    slab_0_4_0.default = true;
    tokio_core_0_1_10.default = (f.tokio_core_0_1_10.default or true);
    tokio_io_0_1_4.default = true;
  }) [ bytes_0_4_5_features futures_0_1_17_features iovec_0_1_1_features log_0_3_8_features mio_0_6_11_features scoped_tls_0_1_0_features slab_0_4_0_features tokio_io_0_1_4_features ];
  tokio_io_0_1_4 = { features?(tokio_io_0_1_4_features {}) }: tokio_io_0_1_4_ {
    dependencies = mapFeatures features ([ bytes_0_4_5 futures_0_1_17 log_0_3_8 ]);
  };
  tokio_io_0_1_4_features = f: updateFeatures f (rec {
    bytes_0_4_5.default = true;
    futures_0_1_17.default = true;
    log_0_3_8.default = true;
    tokio_io_0_1_4.default = (f.tokio_io_0_1_4.default or true);
  }) [ bytes_0_4_5_features futures_0_1_17_features log_0_3_8_features ];
  tokio_mockstream_1_1_0 = { features?(tokio_mockstream_1_1_0_features {}) }: tokio_mockstream_1_1_0_ {
    dependencies = mapFeatures features ([ futures_0_1_17 tokio_io_0_1_4 ]);
  };
  tokio_mockstream_1_1_0_features = f: updateFeatures f (rec {
    futures_0_1_17.default = true;
    tokio_io_0_1_4.default = true;
    tokio_mockstream_1_1_0.default = (f.tokio_mockstream_1_1_0.default or true);
  }) [ futures_0_1_17_features tokio_io_0_1_4_features ];
  tokio_timer_0_1_2 = { features?(tokio_timer_0_1_2_features {}) }: tokio_timer_0_1_2_ {
    dependencies = mapFeatures features ([ futures_0_1_17 slab_0_3_0 ]);
  };
  tokio_timer_0_1_2_features = f: updateFeatures f (rec {
    futures_0_1_17.default = true;
    slab_0_3_0.default = true;
    tokio_timer_0_1_2.default = (f.tokio_timer_0_1_2.default or true);
  }) [ futures_0_1_17_features slab_0_3_0_features ];
  tokio_tls_0_1_3 = { features?(tokio_tls_0_1_3_features {}) }: tokio_tls_0_1_3_ {
    dependencies = mapFeatures features ([ futures_0_1_17 native_tls_0_1_4 tokio_core_0_1_10 tokio_io_0_1_4 ])
      ++ (if !(kernel == "darwin") && !(kernel == "windows") && !(kernel == "ios") then mapFeatures features ([]) else [])
      ++ (if kernel == "darwin" || kernel == "ios" then mapFeatures features ([]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([]) else []);
  };
  tokio_tls_0_1_3_features = f: updateFeatures f (rec {
    futures_0_1_17.default = true;
    native_tls_0_1_4.default = true;
    tokio_core_0_1_10.default = true;
    tokio_io_0_1_4.default = true;
    tokio_tls_0_1_3.default = (f.tokio_tls_0_1_3.default or true);
  }) [ futures_0_1_17_features native_tls_0_1_4_features tokio_core_0_1_10_features tokio_io_0_1_4_features ];
  toml_0_4_5 = { features?(toml_0_4_5_features {}) }: toml_0_4_5_ {
    dependencies = mapFeatures features ([ serde_1_0_23 ]);
  };
  toml_0_4_5_features = f: updateFeatures f (rec {
    serde_1_0_23.default = true;
    toml_0_4_5.default = (f.toml_0_4_5.default or true);
  }) [ serde_1_0_23_features ];
  unicode_bidi_0_3_4 = { features?(unicode_bidi_0_3_4_features {}) }: unicode_bidi_0_3_4_ {
    dependencies = mapFeatures features ([ matches_0_1_6 ]);
    features = mkFeatures (features.unicode_bidi_0_3_4 or {});
  };
  unicode_bidi_0_3_4_features = f: updateFeatures f (rec {
    matches_0_1_6.default = true;
    unicode_bidi_0_3_4.default = (f.unicode_bidi_0_3_4.default or true);
    unicode_bidi_0_3_4.flame =
      (f.unicode_bidi_0_3_4.flame or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.flamer =
      (f.unicode_bidi_0_3_4.flamer or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.serde =
      (f.unicode_bidi_0_3_4.serde or false) ||
      (f.unicode_bidi_0_3_4.with_serde or false) ||
      (unicode_bidi_0_3_4.with_serde or false);
  }) [ matches_0_1_6_features ];
  unicode_normalization_0_1_5 = { features?(unicode_normalization_0_1_5_features {}) }: unicode_normalization_0_1_5_ {};
  unicode_normalization_0_1_5_features = f: updateFeatures f (rec {
    unicode_normalization_0_1_5.default = (f.unicode_normalization_0_1_5.default or true);
  }) [];
  unicode_xid_0_0_4 = { features?(unicode_xid_0_0_4_features {}) }: unicode_xid_0_0_4_ {
    features = mkFeatures (features.unicode_xid_0_0_4 or {});
  };
  unicode_xid_0_0_4_features = f: updateFeatures f (rec {
    unicode_xid_0_0_4.default = (f.unicode_xid_0_0_4.default or true);
  }) [];
  unreachable_1_0_0 = { features?(unreachable_1_0_0_features {}) }: unreachable_1_0_0_ {
    dependencies = mapFeatures features ([ void_1_0_2 ]);
  };
  unreachable_1_0_0_features = f: updateFeatures f (rec {
    unreachable_1_0_0.default = (f.unreachable_1_0_0.default or true);
    void_1_0_2.default = (f.void_1_0_2.default or false);
  }) [ void_1_0_2_features ];
  url_1_6_0 = { features?(url_1_6_0_features {}) }: url_1_6_0_ {
    dependencies = mapFeatures features ([ idna_0_1_4 matches_0_1_6 percent_encoding_1_0_1 ]);
    features = mkFeatures (features.url_1_6_0 or {});
  };
  url_1_6_0_features = f: updateFeatures f (rec {
    idna_0_1_4.default = true;
    matches_0_1_6.default = true;
    percent_encoding_1_0_1.default = true;
    url_1_6_0.default = (f.url_1_6_0.default or true);
    url_1_6_0.encoding =
      (f.url_1_6_0.encoding or false) ||
      (f.url_1_6_0.query_encoding or false) ||
      (url_1_6_0.query_encoding or false);
    url_1_6_0.heapsize =
      (f.url_1_6_0.heapsize or false) ||
      (f.url_1_6_0.heap_size or false) ||
      (url_1_6_0.heap_size or false);
  }) [ idna_0_1_4_features matches_0_1_6_features percent_encoding_1_0_1_features ];
  utf8_ranges_0_1_3 = { features?(utf8_ranges_0_1_3_features {}) }: utf8_ranges_0_1_3_ {};
  utf8_ranges_0_1_3_features = f: updateFeatures f (rec {
    utf8_ranges_0_1_3.default = (f.utf8_ranges_0_1_3.default or true);
  }) [];
  utf8_ranges_1_0_0 = { features?(utf8_ranges_1_0_0_features {}) }: utf8_ranges_1_0_0_ {};
  utf8_ranges_1_0_0_features = f: updateFeatures f (rec {
    utf8_ranges_1_0_0.default = (f.utf8_ranges_1_0_0.default or true);
  }) [];
  vcpkg_0_2_2 = { features?(vcpkg_0_2_2_features {}) }: vcpkg_0_2_2_ {};
  vcpkg_0_2_2_features = f: updateFeatures f (rec {
    vcpkg_0_2_2.default = (f.vcpkg_0_2_2.default or true);
  }) [];
  void_1_0_2 = { features?(void_1_0_2_features {}) }: void_1_0_2_ {
    features = mkFeatures (features.void_1_0_2 or {});
  };
  void_1_0_2_features = f: updateFeatures f (rec {
    void_1_0_2.default = (f.void_1_0_2.default or true);
    void_1_0_2.std =
      (f.void_1_0_2.std or false) ||
      (f.void_1_0_2.default or false) ||
      (void_1_0_2.default or false);
  }) [];
  winapi_0_2_8 = { features?(winapi_0_2_8_features {}) }: winapi_0_2_8_ {};
  winapi_0_2_8_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = (f.winapi_0_2_8.default or true);
  }) [];
  winapi_build_0_1_1 = { features?(winapi_build_0_1_1_features {}) }: winapi_build_0_1_1_ {};
  winapi_build_0_1_1_features = f: updateFeatures f (rec {
    winapi_build_0_1_1.default = (f.winapi_build_0_1_1.default or true);
  }) [];
  ws2_32_sys_0_2_1 = { features?(ws2_32_sys_0_2_1_features {}) }: ws2_32_sys_0_2_1_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  ws2_32_sys_0_2_1_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
    ws2_32_sys_0_2_1.default = (f.ws2_32_sys_0_2_1.default or true);
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
}
